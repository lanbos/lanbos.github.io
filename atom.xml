<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lanbos&#39;blog</title>
  <subtitle>这个人假装很懒，什么都没有留下</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lanbos.win/"/>
  <updated>2018-07-19T07:36:46.051Z</updated>
  <id>http://lanbos.win/</id>
  
  <author>
    <name>lanbos</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用markdown快速生成类PPT的html</title>
    <link href="http://lanbos.win/2018/07/19/tools/h5PPT/"/>
    <id>http://lanbos.win/2018/07/19/tools/h5PPT/</id>
    <published>2018-07-19T06:53:08.149Z</published>
    <updated>2018-07-19T07:36:46.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速生成"><a href="#快速生成" class="headerlink" title="快速生成"></a>快速生成</h2><p>开发者讲ppt的场景不少，但是身为前端开发工程师，拖拖拽拽生成ppt一点都不Geek，最近发现了一款能快速用md生成类PPT的html的库，好用到爆炸：<a href="https://github.com/gnab/remark" target="_blank" rel="noopener">remark</a><br><a id="more"></a><br>官方事例简介明了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(https://fonts.googleapis.com/css?family=Yanone+Kaffeesatz);</span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(https://fonts.googleapis.com/css?family=Droid+Serif:<span class="number">400</span>,<span class="number">700</span>,<span class="number">400</span>italic);</span></span><br><span class="line"><span class="css">      @<span class="keyword">import</span> url(https://fonts.googleapis.com/css?family=Ubuntu+Mono:<span class="number">400</span>,<span class="number">700</span>,<span class="number">400</span>italic);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">      <span class="selector-tag">body</span> &#123; <span class="attribute">font-family</span>: <span class="string">'Droid Serif'</span>; &#125;</span></span><br><span class="line"><span class="undefined">      h1, h2, h3 &#123;</span></span><br><span class="line"><span class="undefined">        font-family: 'Yanone Kaffeesatz';</span></span><br><span class="line"><span class="undefined">        font-weight: normal;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.remark-code</span>, <span class="selector-class">.remark-inline-code</span> &#123; <span class="attribute">font-family</span>: <span class="string">'Ubuntu Mono'</span>; &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"source"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">class: center, middle</span><br><span class="line"></span><br><span class="line"># Title</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Agenda</span><br><span class="line"></span><br><span class="line">1. Introduction</span><br><span class="line">2. Deep-dive</span><br><span class="line">3. ...</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"># Introduction</span><br><span class="line">        .green[</span><br><span class="line">            自带语法赋class</span><br><span class="line">        ]</span><br><span class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/remark/0.14.0/remark.min.js"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 换成国内的cdn加载速度更快 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> slideshow = remark.create(&#123;</span></span><br><span class="line"><span class="javascript">        ratio: <span class="string">'16:9'</span>,</span></span><br><span class="line"><span class="javascript">        click: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        highlightLanguage: <span class="string">'javascript'</span>,</span></span><br><span class="line"><span class="javascript">        highlightStyle: <span class="string">'solarized-light'</span>,</span></span><br><span class="line"><span class="undefined">      &#125;);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>只需在<code>textarea</code>标签里写md就可以了，如果对样式不满足，直接写css，对<code>h1,h2,ul,li</code>等常用标签附样式即可。非常适合快速简单展示内容的场景。</p>
<h2 id="炫酷生成"><a href="#炫酷生成" class="headerlink" title="炫酷生成"></a>炫酷生成</h2><p>当然remark虽然很强大使用很便捷，但是当你需要给客户或者在其他较为正式的场合演示的时候，你需要的是炫酷的动画，和抓眼球的交互。这时候你需要的是<code>Reveal.js</code>,至于<code>Reveal.js</code>的使用方法网上教程很多，个人感觉使用起来不如<code>remark</code> 简单，也不够geek。当然通过web方式生成幻灯的库有很多，可详细看<a href="https://www.jianshu.com/p/09a3bbb8b362" target="_blank" rel="noopener">几个秒杀PPT的高（zhe）大(teng)上(ren)的幻灯工具</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速生成&quot;&gt;&lt;a href=&quot;#快速生成&quot; class=&quot;headerlink&quot; title=&quot;快速生成&quot;&gt;&lt;/a&gt;快速生成&lt;/h2&gt;&lt;p&gt;开发者讲ppt的场景不少，但是身为前端开发工程师，拖拖拽拽生成ppt一点都不Geek，最近发现了一款能快速用md生成类PPT的html的库，好用到爆炸：&lt;a href=&quot;https://github.com/gnab/remark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;remark&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://lanbos.win/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>主旋律能不能成变奏曲？——观《战狼2》的脑洞</title>
    <link href="http://lanbos.win/2018/07/09/zhanlang2/"/>
    <id>http://lanbos.win/2018/07/09/zhanlang2/</id>
    <published>2018-07-09T08:02:30.760Z</published>
    <updated>2018-07-09T08:02:30.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="无剧透的短影评"><a href="#无剧透的短影评" class="headerlink" title="无剧透的短影评"></a>无剧透的短影评</h1><p>作为主旋律电影给四星没问题。全片无尿点，动作戏还不错，略有夸张的成分但远不至于“手撕鬼子”。没有像第一部那样反复喊口号，最后的主旋律煽情却更燃。正片结束没等彩蛋开始影院里已经有人鼓掌了。再考虑到达康书记和东来局长的混入，影片加到满分都没问题。吐槽一下，战狼系列是不是可以作为撩妹的反面教材？网评说吴京是直男癌的好像有点道理。。。<br><a id="more"></a></p>
<h1 id="有剧透的大脑洞"><a href="#有剧透的大脑洞" class="headerlink" title="有剧透的大脑洞"></a>有剧透的大脑洞</h1><p>看之前网上已经有人在说这是中国的“超级英雄”电影，要是从这个角度出发这片给三星都嫌多。主旋律毕竟不能成变奏曲，即便吴京再灭几个装甲师，再吹几瓶茅台，也不会允许我军里有超级英雄的存在，虽然个人英雄主义已经人人都看的出来，但是战狼系列还是彻彻底底的把挥扬主旋律定为根本基调。然后下面我开始扯脑洞：</p>
<h2 id="只差一点就能变成战狼侠"><a href="#只差一点就能变成战狼侠" class="headerlink" title="只差一点就能变成战狼侠"></a>只差一点就能变成战狼侠</h2><p>剧情中冷锋先得致命传染病，后被新研发出的解药治好，剧情都铺垫到这了，冷锋变身战狼侠观众很容易就能脑补出来啊，治好之后获得个把超能力不是很正常么？然后再让作为解药的黑人小女孩领了便当（要是嫌太残忍可以设定为能吹一箱茅台的基因才能获得超能力），战狼侠的出身就能完美解决。脑洞到这的话就得说说为什么这部“战狼侠”只能得三星。</p>
<h2 id="超级英雄电影最重要的吸睛点"><a href="#超级英雄电影最重要的吸睛点" class="headerlink" title="超级英雄电影最重要的吸睛点"></a>超级英雄电影最重要的吸睛点</h2><p>超级英雄系列电影获得口碑和票房双丰收的根本是什么？大场面？高颜值？大脑洞？牛逼特效？其实最关键的是要有个嘴炮角色。。。嘴炮让全片节奏张弛有度，让观众观影结束后回味无穷，让角色塑造深得人心。有这样嘴炮的超级英雄影片大都口碑和票房拿到了双丰收。星爵，小贱贱，蚁人，小蜘蛛，钢铁侠，等等。。。漫威吃到了嘴炮成功的甜头，现在感觉在把所有电影里都安插了嘴炮角色，这也是其全面超越dc系列的杀手锏。反观战狼里的嘴炮还是差不少，其实吴京本身就有嘴炮的潜力，冷锋的角色是吴京的本色出演，有“兵痞”的既视感，冷锋角色文戏基本就是垫剧情和弘扬主旋律但也能看出其嘴够臭，全片已经不再禁“国骂”和“国际骂”，那再加点嘴炮和freestyle让气氛更欢快点岂不是更好。<br>张翰的富二代角色也适合当嘴炮，全片的幽默点张翰承担了不少，作为男三（什么？于谦才是男三？东来局长才是男三？），如果变成了嘴炮这个已被洗白的角色肯定能继续在第三部里成为亮点。达康书记不能变成嘴炮，因为达康书记变成嘴炮光芒必将盖过男一，干脆把超能力也给达康书记吧。</p>
<h2 id="文戏太少"><a href="#文戏太少" class="headerlink" title="文戏太少"></a>文戏太少</h2><p>其实全片无尿点全是快节奏的武戏感觉是挺爽，但观众到后来会有疲倦感，这也是嘴炮调节影片节奏的作用。再加上“直男癌”从头到尾，我至今没感觉到冷锋和龙小云或者第二部剧女主之间有什么刻骨铭心的。。。彩蛋中似乎透露龙小云没死，而且表情有些诡异，要是第三部黑化了的话那真是神来之笔了。</p>
<h2 id="反派不走心"><a href="#反派不走心" class="headerlink" title="反派不走心"></a>反派不走心</h2><p>也不能说反派演员演的不走心，的确是戏份太少了。记得有个亚洲雇佣兵一直臭着长脸，感觉应该是个小boss级别的，然而后面几个镜头就死了，实在可惜。超级英雄电影反派出彩的太多了，甚至有的反派因太受欢迎洗白的例子也不少，战狼的反派太脸谱化，可能也是迫不得已，毕竟要求，正的坚决不能受到质疑，有邪的必须彻底根除，所以不会看到亦正亦邪的受欢迎反派。还是看下一部龙小云会不会黑化吧。</p>
<h2 id="票钱还是值了"><a href="#票钱还是值了" class="headerlink" title="票钱还是值了"></a>票钱还是值了</h2><p>脑洞就说这么多，战狼让我找回了些小时候看冲出亚马逊时的感觉，虽然作为主旋律电影变奏的可能性很小，但我仍会怀揣不切实际的脑洞为下一部贡献票房。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;无剧透的短影评&quot;&gt;&lt;a href=&quot;#无剧透的短影评&quot; class=&quot;headerlink&quot; title=&quot;无剧透的短影评&quot;&gt;&lt;/a&gt;无剧透的短影评&lt;/h1&gt;&lt;p&gt;作为主旋律电影给四星没问题。全片无尿点，动作戏还不错，略有夸张的成分但远不至于“手撕鬼子”。没有像第一部那样反复喊口号，最后的主旋律煽情却更燃。正片结束没等彩蛋开始影院里已经有人鼓掌了。再考虑到达康书记和东来局长的混入，影片加到满分都没问题。吐槽一下，战狼系列是不是可以作为撩妹的反面教材？网评说吴京是直男癌的好像有点道理。。。&lt;br&gt;
    
    </summary>
    
      <category term="todo" scheme="http://lanbos.win/categories/todo/"/>
    
    
      <category term="todo" scheme="http://lanbos.win/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>mac的终端上展示树形目录结构</title>
    <link href="http://lanbos.win/2018/07/09/tools/tree_base/"/>
    <id>http://lanbos.win/2018/07/09/tools/tree_base/</id>
    <published>2018-07-09T08:02:30.750Z</published>
    <updated>2018-07-09T08:02:30.750Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>本文参考<a href="http://yijiebuyi.com/blog/c0defa3a47d16e675d58195adc35514b.html" target="_blank" rel="noopener">mac 下的 tree 命令 终端展示你的目录树结构</a></li>
</ul>
<p>很多时候需要在终端中查看目录结构，而<code>ls</code>命令并不够用。Linux有<code>tree</code>命令可以更直观的展示出文件的目录结构。然而在mac上没有<code>tree</code>命令，只能通过复杂的shell命令来代替：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'</span><br></pre></td></tr></table></figure></p>
<p>然后在zsh或者其他bash的配置文件中把上述命令拷贝进去来使用，这样并不方便而且无法指定层级展示。<br>借助mac上的包管理器<code>brew</code>可以安装一个很便利的工具:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install tree</span><br><span class="line">tree -help</span><br></pre></td></tr></table></figure></p>
<p>帮助里列举了很多方法，最常用的是<code>tree -L 层级</code>指定层级查看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;本文参考&lt;a href=&quot;http://yijiebuyi.com/blog/c0defa3a47d16e675d58195adc35514b.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mac 下的 tree 命令 终端展示你的目
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具插件" scheme="http://lanbos.win/tags/%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>前端代码演示神器jsbin</title>
    <link href="http://lanbos.win/2018/07/09/tools/jsfiddle_base/"/>
    <id>http://lanbos.win/2018/07/09/tools/jsfiddle_base/</id>
    <published>2018-07-09T08:02:30.670Z</published>
    <updated>2018-07-09T08:02:30.670Z</updated>
    
    <content type="html"><![CDATA[<p>之前在blog中嵌入代码都是使用markdown格式的代码嵌入功能，这样虽然很方便但是今天在技术blog上发现一种更利于展示前端代码demo的方式，就是类似于jsbin的在线编辑器。<br>打开<a href="http://jsbin.com/?html,css,output" target="_blank" rel="noopener">jsbin官网</a>，界面类似于<br><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fg5rt1im7xj213x0l0abs.jpg" alt=""><br><a id="more"></a><br>界面可以直观的看到html，js，css，控制台和输出视图。可以选择各板块是否显示。<br><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fg5s7kxl5sj209z01cmx1.jpg" alt=""></p>
<h2 id="插入js，css库"><a href="#插入js，css库" class="headerlink" title="插入js，css库"></a>插入js，css库</h2><p>推荐手动找到相应库的cdn直接用标签在html板块中引入。点<code>Add library</code>直接添加不敢保证相关库的加载速度。</p>
<h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>可以用<code>jsonp</code>技术调用在线的接口来获取接口数据进行展示，当然只能是get请求，并且接口支持jsonp。</p>
<h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p>编辑完代码后可以用快捷键<code>cmd+s</code>保存，然后点左上角的<code>share</code>弹出如下弹窗<br><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fg5scgffbhj20c309bwfh.jpg" alt=""><br>即可以选择用链接分享给别人，或者用html代码嵌入到自己的网页中（其实就是iframe）展示。</p>
<h2 id="和jsfiddle对比"><a href="#和jsfiddle对比" class="headerlink" title="和jsfiddle对比"></a>和jsfiddle对比</h2><p><a href="https://jsfiddle.net/" target="_blank" rel="noopener">jsfiddle</a>也是很多人使用的在线编辑器。</p>
<ol>
<li>和jsfiddle对比jsbin有自带的控制台，jsfiddle需要引<code>https://getfirebug.com/firebug-lite.js</code>库来模拟一个firebug控制台。</li>
<li>jsbin分享没有暗色皮肤，可能在嵌入网站时会影响网站整体风格。</li>
<li>jsbin代码片段的管理不如jsfiddle直观。</li>
<li>两者服务器应该都是在国外，但是jsbin加载速度更快一些，jsfiddle有时会被墙，jsbin有可可靠的<code>cmd+s</code>保存快捷键，防止代码编辑到一半丢失。<br>总之jsfiddle在颜值上率胜一筹，jsbin更加实用一些。<h2 id="国内替代品"><a href="#国内替代品" class="headerlink" title="国内替代品"></a>国内替代品</h2>国内的<a href="http://runjs.cn/" target="_blank" rel="noopener">runjs</a>算是比较著名，但是界面丑陋功能难用，唯一的优点就是加载速度快，而且感觉是很久没有更新维护过了，不推荐使用。<br>ps： 还搜到了名字挺山寨的<a href="http://jsrun.net/" target="_blank" rel="noopener">jsrun</a>。。。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在blog中嵌入代码都是使用markdown格式的代码嵌入功能，这样虽然很方便但是今天在技术blog上发现一种更利于展示前端代码demo的方式，就是类似于jsbin的在线编辑器。&lt;br&gt;打开&lt;a href=&quot;http://jsbin.com/?html,css,output&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsbin官网&lt;/a&gt;，界面类似于&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/5c9d16d6ly1fg5rt1im7xj213x0l0abs.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具插件" scheme="http://lanbos.win/tags/%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>gist工作流sftp搭建实践</title>
    <link href="http://lanbos.win/2018/07/09/tools/ftp_setting/"/>
    <id>http://lanbos.win/2018/07/09/tools/ftp_setting/</id>
    <published>2018-07-09T08:02:30.669Z</published>
    <updated>2018-07-09T08:02:30.669Z</updated>
    
    <content type="html"><![CDATA[<p>最近装了两个服务器，对于web前端来说装环境这种事的确是头疼，准备下一步看看docker了。在配置lnmp的过程中看到lnmp.org官网提供的一键安装脚本很酷<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;&amp; tar zxf lnmp1.4.tar.gz &amp;&amp; <span class="built_in">cd</span> lnmp1.4 &amp;&amp; ./install.sh lnmp</span><br></pre></td></tr></table></figure></p>
<p>其实就是用wget远程下载了lnmp的压缩包，解压，然后安装。wget配合远程的脚本的确是能实现很多的“一行命令安装（执行）**”。远程脚本有个很好的存放地点就是github提供的gist服务。于是结合<code>wget</code>,<code>gist</code>,<code>python</code>,<code>shell</code>实现了”一行命令装sftp”。<br><a id="more"></a></p>
<h2 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h2><p>wget是linux上标配的下载程序，mac上默认是没有wget程序的，需要用brew进行安装：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果没有安装brew需要安装brew</span></span><br><span class="line">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装wget</span></span><br><span class="line">brew install wget</span><br></pre></td></tr></table></figure></p>
<h2 id="gist"><a href="#gist" class="headerlink" title="gist"></a>gist</h2><p><a href="https://gist.github.com/" target="_blank" rel="noopener">gist</a>服务是github提供的非常强大的功能，<a href="http://gohom.win/2015/11/26/gist/" target="_blank" rel="noopener">Gist介绍与用法</a>.<br>我主要用gist的两个功能：</p>
<ol>
<li>备份一些自用脚本和配置文件</li>
<li>用md写一些简单的便签便于分享，能在一定程度上代替云笔记<br>gist配合<a href="https://www.gistoapp.com/" target="_blank" rel="noopener">gisto</a>使用的话可以满足你对代码snippets管理和分享的全部幻想。（gisto墙内可能无法下载，请自行解决）</li>
</ol>
<h2 id="写脚本"><a href="#写脚本" class="headerlink" title="写脚本"></a>写脚本</h2><p>整个sftp设置参考<a href="http://www.cnblogs.com/whatmiss/p/7068772.html" target="_blank" rel="noopener">Linux（CentOS）上配置 SFTP</a>,只是用python3让整个设置自动化，python2不一定兼容。<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    paths = sys.argv[<span class="number">1</span>]</span><br><span class="line">    userName=sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    paths = <span class="string">"www"</span></span><br><span class="line">    userName=<span class="string">"sftpuser"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SftpSetting</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.pathName = <span class="string">"/datas/"</span> + paths  <span class="comment"># sftp目录</span></span><br><span class="line">        self.usrName =userName  <span class="comment"># sftp用户名</span></span><br><span class="line">        self.filetxt = <span class="string">''' </span></span><br><span class="line"><span class="string">Subsystem sftp internal-sftp #这行指定使用sftp服务使用系统自带的internal-sftp</span></span><br><span class="line"><span class="string">Match User &#123;1&#125; #这行用来匹配用户__sftpFlagStatus</span></span><br><span class="line"><span class="string">ChrootDirectory &#123;0&#125;  #用chroot将用户的根目录指定到/datas/www ，这样用户就只能在/datas/www下活动</span></span><br><span class="line"><span class="string">AllowTcpForwarding no</span></span><br><span class="line"><span class="string">ForceCommand internal-sftp #指定sftp命令</span></span><br><span class="line"><span class="string">        '''</span>.format(self.pathName, self.usrName)</span><br><span class="line">        self.step1_init()</span><br><span class="line">        self.step2_setfile1()</span><br><span class="line">        self.step3_setWritedir()</span><br><span class="line">        self.step4()</span><br><span class="line">        os.system(<span class="string">"service sshd restart"</span>)</span><br><span class="line">    <span class="comment"># 初始化用户组等</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step1_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        str1 = <span class="string">"groupadd sftp&amp;&amp;useradd -g sftp -s /bin/false &#123;1&#125;&amp;&amp;passwd &#123;1&#125;&amp;&amp;mkdir &#123;0&#125;&amp;&amp;usermod -d &#123;0&#125; &#123;1&#125;"</span>.format(</span><br><span class="line">            self.pathName, self.usrName)</span><br><span class="line">        os.system(str1)</span><br><span class="line">    <span class="comment"># 编辑sshd_config文件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step2_setfile1</span><span class="params">(self)</span>:</span></span><br><span class="line">        fo = open(<span class="string">"/etc/ssh/sshd_config"</span>, <span class="string">"r+"</span>)</span><br><span class="line">        s = fo.read()  <span class="comment"># 读出</span></span><br><span class="line">        fo.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        str1 = re.sub(<span class="string">r'[\s]*[^#]Subsystem[\s]*sftp[\s]*\/usr\/libexec\/openssh\/sftp-server'</span>,</span><br><span class="line">                      <span class="string">"Subsystem        sftp     /usr/libexec/openssh/sftp-server"</span>, s)</span><br><span class="line">        str2 = re.sub(</span><br><span class="line">            <span class="string">r'PasswordAuthentication[\s]*no'</span>, <span class="string">"PasswordAuthentication yes"</span>, str1)</span><br><span class="line">        fo.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">        fo.write(str2)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"__sftpFlagStatus"</span> <span class="keyword">not</span> <span class="keyword">in</span> str2:</span><br><span class="line">            fo.write(self.filetxt)</span><br><span class="line">        fo.close()</span><br><span class="line">    <span class="comment"># 给sftp开放读写权限</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step3_setWritedir</span><span class="params">(self)</span>:</span></span><br><span class="line">        str1 = <span class="string">"chown -R root:root &#123;0&#125;&amp;&amp;chmod 755 &#123;0&#125;&amp;&amp;mkdir &#123;0&#125;/&#123;1&#125;&amp;&amp;chown -R &#123;1&#125;:sftp &#123;0&#125;/&#123;1&#125;/&amp;&amp;chmod 755 &#123;0&#125;/&#123;1&#125;/"</span>.format(</span><br><span class="line">            self.pathName, self.usrName)</span><br><span class="line">        os.system(str1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">step4</span><span class="params">(self)</span>:</span></span><br><span class="line">        f = open(<span class="string">"/etc/sysconfig/selinux"</span>, <span class="string">"r+"</span>)</span><br><span class="line">        s = f.read()</span><br><span class="line">        f.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        f.truncate()  <span class="comment"># 清空文件</span></span><br><span class="line">        f.write(s.replace(<span class="string">"SELINUX=enforcing"</span>, <span class="string">"SELINUX=disabled"</span>))</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    sftp = SftpSetting()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>
<p>写好脚本上传到gist：<br><a href="https://gist.githubusercontent.com/lanbos/adac5634593c6eb3f8d20c84cd4100d4/raw/70389d8ec59349d7d128a0ca2fd57d1effb147ba/sftpSet.py" target="_blank" rel="noopener">https://gist.githubusercontent.com/lanbos/adac5634593c6eb3f8d20c84cd4100d4/raw/70389d8ec59349d7d128a0ca2fd57d1effb147ba/sftpSet.py</a></p>
<p>最终命令为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://gist.githubusercontent.com/lanbos/adac5634593c6eb3f8d20c84cd4100d4/raw/edd55f701b47371d81c9736f2082d7cb18e2ed9b/sftpSet.py&amp;&amp;python3 sftpSet.py www sftpuser</span><br></pre></td></tr></table></figure></p>
<p><code>www</code>为目录名，<code>sftpuser</code>为用户名。<br>本脚本在阿里云和谷歌云上实验成功，其他vps不保证。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近装了两个服务器，对于web前端来说装环境这种事的确是头疼，准备下一步看看docker了。在配置lnmp的过程中看到lnmp.org官网提供的一键安装脚本很酷&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget -c http://soft.vpser.net/lnmp/lnmp1.4.tar.gz &amp;amp;&amp;amp; tar zxf lnmp1.4.tar.gz &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; lnmp1.4 &amp;amp;&amp;amp; ./install.sh lnmp&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其实就是用wget远程下载了lnmp的压缩包，解压，然后安装。wget配合远程的脚本的确是能实现很多的“一行命令安装（执行）**”。远程脚本有个很好的存放地点就是github提供的gist服务。于是结合&lt;code&gt;wget&lt;/code&gt;,&lt;code&gt;gist&lt;/code&gt;,&lt;code&gt;python&lt;/code&gt;,&lt;code&gt;shell&lt;/code&gt;实现了”一行命令装sftp”。&lt;br&gt;
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="linux" scheme="http://lanbos.win/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>html代码检测工具htmlhint</title>
    <link href="http://lanbos.win/2018/07/09/tools/htmlhint_base/"/>
    <id>http://lanbos.win/2018/07/09/tools/htmlhint_base/</id>
    <published>2018-07-09T08:02:30.669Z</published>
    <updated>2018-07-09T08:02:30.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在编辑html过程中尝尝因为反复的编辑文档会出现一些标签没有闭合等错误，这种错误若是通过人工排查比较麻烦，npm上有一款工具是专门检查html文档格式的工具——<code>htmlhint</code>.</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>需要node环境，在终端中运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  htmlhint -g --save</span><br></pre></td></tr></table></figure></p>
<p>安装后有具体的使用说明。</p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>直接在终端中输入htmlhint和需要检查的文件或者文件夹即可<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htmlhint path/file/dir</span><br></pre></td></tr></table></figure></p>
<h2 id="配合编辑器使用"><a href="#配合编辑器使用" class="headerlink" title="配合编辑器使用"></a>配合编辑器使用</h2><p>vscode中直接在商店中搜索<code>htmlhint</code>，找到后下载即可，重启后插件自动运行，在编辑html文件时若有类似于标签未闭合的情况，会有错误提示。<br>sublime中对应的插件叫做<code>Sublime-htmlhint</code>，安装插件后，打开<code>Preferences &gt; Package Settings &gt; Sublime-htmlhint &gt; Setting - User</code>中配置nodejs的命令路径和htmlhint的命令路径，然后即可运行检查，在mac中运行快捷键为<code>Ctrl+Shift+J</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://github.com/yaniswang/HTMLHint" target="_blank" rel="noopener">HTMLHint官方github</a><br><a href="https://github.com/tgfjt/Sublime-htmlhint" target="_blank" rel="noopener">Sublime-htmlhint插件github</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在编辑html过程中尝尝因为反复的编辑文档会出现一些标签没有闭合等错误，这种错误若是通过人工排查比较麻烦，npm上有一款工具是专门检查htm
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具插件" scheme="http://lanbos.win/tags/%E5%B7%A5%E5%85%B7%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>移动端常见网页尺寸获取</title>
    <link href="http://lanbos.win/2018/07/09/tools/h5ViewCommon/"/>
    <id>http://lanbos.win/2018/07/09/tools/h5ViewCommon/</id>
    <published>2018-07-09T08:02:30.669Z</published>
    <updated>2018-07-09T08:02:30.669Z</updated>
    
    <content type="html"><![CDATA[<p>移动端常用代码显示手机尺寸宽度：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"网页可见区域宽 ："</span>+ <span class="built_in">document</span>.body.clientWidth;  </span><br><span class="line">s += <span class="string">"\r\n网页可见区域高："</span>+ <span class="built_in">document</span>.body.clientHeight;   </span><br><span class="line">s += <span class="string">"\r\n网页可见区域高："</span>+ <span class="built_in">document</span>.body.offsetHeight +<span class="string">" (包括边线的宽)"</span>;  </span><br><span class="line">s += <span class="string">"\r\n网页正文全文宽："</span>+ <span class="built_in">document</span>.body.scrollWidth;  </span><br><span class="line">s += <span class="string">"\r\n网页正文全文高："</span>+ <span class="built_in">document</span>.body.scrollHeight;  </span><br><span class="line">s += <span class="string">"\r\n网页被卷去的高："</span>+ <span class="built_in">document</span>.body.scrollTop;  </span><br><span class="line">s += <span class="string">"\r\n网页被卷去的左："</span>+ <span class="built_in">document</span>.body.scrollLeft;  </span><br><span class="line">s += <span class="string">"\r\n网页正文部分上："</span>+ <span class="built_in">window</span>.screenTop;  </span><br><span class="line">s += <span class="string">"\r\n网页正文部分左："</span>+ <span class="built_in">window</span>.screenLeft;  </span><br><span class="line">s += <span class="string">"\r\n屏幕分辨率的高："</span>+ <span class="built_in">window</span>.screen.height;  </span><br><span class="line">s += <span class="string">"\r\n屏幕分辨率的宽："</span>+ <span class="built_in">window</span>.screen.width;  </span><br><span class="line">s += <span class="string">"\r\n屏幕可用工作区高度："</span>+ <span class="built_in">window</span>.screen.availHeight;  </span><br><span class="line">s += <span class="string">"\r\n屏幕可用工作区宽度："</span>+ <span class="built_in">window</span>.screen.availWidth;  </span><br><span class="line">s += <span class="string">"\r\n手机宽："</span>+ <span class="built_in">document</span>.documentElement.clientWidth; ;  </span><br><span class="line">s += <span class="string">"\r\n手机高："</span>+ <span class="built_in">document</span>.documentElement.clientHeight;  </span><br><span class="line">alert(s);</span><br></pre></td></tr></table></figure></p>
<div id="box" style="font-size: 18px"></div>


  <script>
  var s = "网页可见区域宽 ：" + document.body.clientWidth;
  s += "<br/>网页可见区域高：" + document.body.clientHeight;
  s += "<br/>网页可见区域高：" + document.body.offsetHeight + " (包括边线的宽)";
  s += "<br/>网页正文全文宽：" + document.body.scrollWidth;
  s += "<br/>网页正文全文高：" + document.body.scrollHeight;
  s += "<br/>网页被卷去的高：" + document.body.scrollTop;
  s += "<br/>网页被卷去的左：" + document.body.scrollLeft;
  s += "<br/>网页正文部分上：" + window.screenTop;
  s += "<br/>网页正文部分左：" + window.screenLeft;
  s += "<br/>屏幕分辨率的高：" + window.screen.height;
  s += "<br/>屏幕分辨率的宽：" + window.screen.width;
  s += "<br/>屏幕可用工作区高度：" + window.screen.availHeight;
  s += "<br/>屏幕可用工作区宽度：" + window.screen.availWidth;
  s += "<br/>手机宽：" + document.documentElement.clientWidth;;
  s += "<br/>手机高：" + document.documentElement.clientHeight;
  var box = document.getElementById('box');
  box.innerHTML = s;
  </script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动端常用代码显示手机尺寸宽度：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/
    
    </summary>
    
      <category term="snippets" scheme="http://lanbos.win/categories/snippets/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>这些年折腾过的编辑器（web开发者编辑器评测）</title>
    <link href="http://lanbos.win/2018/07/09/tools/editor_base01/"/>
    <id>http://lanbos.win/2018/07/09/tools/editor_base01/</id>
    <published>2018-07-09T08:02:30.668Z</published>
    <updated>2018-07-09T08:02:30.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><ol>
<li><p>评测的有,<code>sublime</code>,<code>vscode</code>,<code>atom</code>,<code>brackets</code>，<code>hbuider</code>,<code>eclipse</code>, jetbrains系列的<code>webstorm</code>,<code>pycharm</code>,<code>phpstorm</code>。</p>
</li>
<li><p>vim和EMACS不在测评列，部分ide虽在评测列但是用的不多可能不客观，宇宙第一ide(visual studio)没用过不评测。老古董notpad++等不评测。Dw这种非开发者使用工具不评测。</p>
</li>
<li>本人主要使用mac，写web前端，少量写python，php等脚本语言，写c,java等需要编译的语言的请投vs和其他对应ide，markdown书写会在评测中占少量部分。</li>
<li>本人认为合理的工作流是：简单预览和少量编辑的a编辑器加一个主力写代码的b编辑器。非要All in one的可以投vim和EMACS党。</li>
</ol>
<h1 id="评测维度"><a href="#评测维度" class="headerlink" title="评测维度"></a>评测维度</h1><p>维度不太全，每个维度0~5分，打分是个人观点，不客观或有错误的轻喷。。。</p>
<ol>
<li>易用性<br>对开发者操作使用友好程度，汉化情况，下载难度，是否收费等方面。</li>
<li>功能性<br>主要是补全提示，代码跳转，debug等</li>
<li>拓展性<br>包括插件数量（只是个人感觉的数量），社区，可自定义程度</li>
<li>颜值<br>这个就是主观程度了，可以忽略不看。</li>
<li>亮点<br>会写我觉得编辑器最大的亮点，不打分</li>
<li>缺点<br>会写我觉得编辑器最大的缺点，不打分</li>
</ol>
<hr>
<a id="more"></a>
<h1 id="评测（后有图表）"><a href="#评测（后有图表）" class="headerlink" title="评测（后有图表）"></a>评测（后有图表）</h1><h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3tzbb5xtj20pv0hqwir.jpg" alt=""></p>
<ol>
<li>易用性 3分 </li>
<li>功能性 2分</li>
<li>颜值 3分</li>
<li>拓展性 3分</li>
<li>亮点：秒启动，情怀</li>
<li>缺点：略显老态</li>
</ol>
<hr>
<p>这个应该是评测中大家使用最广的编辑器了，非常优秀的编辑器，也是现在我作为a编辑器来使用的，打文件秒启动这点可以说很难有替代品。sublime是半收费的，免费用户也可以正常使用只是保存时有烦人的弹窗。sublime的扩展性和功能性即便和近年踊跃出来的编辑器相比也不遑多让，经典的马卡龙配色也是很多开发者深爱的主题配色。略有不足是，插件安装时获取插件列表太慢甚至超时报错（可以下载插件列表自设本地服务加载解决）， 插件和配置文件维护方式和其他新出现的编辑器相比不太友好，期待这款编辑器能有更强大的生命力。</p>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3ucv6dohj20t40od0yo.jpg" alt=""></p>
<ol>
<li>易用性 5分 </li>
<li>功能性 3分</li>
<li>颜值 5分</li>
<li>拓展性 5分</li>
<li>亮点：高颜值，完全开源，扩展性非常高</li>
<li>缺点：性能堪忧</li>
</ol>
<hr>
<p>Atom是github官方维护的编辑器基于nodejs开源项目electron，界面简洁大方，非常易于扩展和使用，对编辑markdown也算友好，在意颜值或喜欢折腾的朋友可以使用。至于性能的诟病据说官方在不断使用c++更改底层，随后可能彻底解决问题。</p>
<h2 id="Brackets"><a href="#Brackets" class="headerlink" title="Brackets"></a>Brackets</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3uhm6yiwj20w10blgml.jpg" alt=""></p>
<ol>
<li>易用性 2分 </li>
<li>功能性 3分</li>
<li>颜值 4分</li>
<li>拓展性 3分</li>
<li>亮点：神奇的<code>cmd+e</code></li>
<li>缺点：插件需要翻墙下载</li>
</ol>
<hr>
<p>Brackets是Adobe官方维护的编辑器，同样基于nodejs，据说用了高端算法没有Atom编辑器的性能诟病，在实际使用过程中也没有卡顿情况。<code>ctrl+e</code>快捷键非常有意思，可以快速定位html标签对应的css样式。Adobe开发这款软件写html+css非常舒畅，对开发js及其他脚本语言也很友好，可惜插件商店被墙，而且下载应该走的是非http协议，无法挂ss下载，导致易用性和拓展性分低。</p>
<h2 id="hbuider"><a href="#hbuider" class="headerlink" title="hbuider"></a>hbuider</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3v2thu11j210m0l8gpe.jpg" alt=""></p>
<ol>
<li>易用性 4分 </li>
<li>功能性 4分</li>
<li>颜值 4+分</li>
<li>拓展性 1分</li>
<li>亮点：前端便捷代码snippets，app开发生态</li>
<li>缺点：拓展性低</li>
</ol>
<hr>
<p>hbuider是国内基于eclipse制作的针对前端开发的编辑器。有非常便捷的前端代码块可以飞速开发，我现使用的编辑器的自定义snippets很多都是参考了hbuider代码块。因为是基于eclipse，相当于是ide了，补全和项目构建本身功能已经很强大。但是要想下载eclipse上的插件很多需要下载jdk，因为在底层更改了部分eclipse代码，部分插件下载了jdk也无法使用。hbuider有自身使用套壳js开发app的生态，也是亮点之一，不太了解不做深谈。最后说一下这款编辑器的<code>护眼绿</code>主题，本人是<code>Solarized Light</code>脑残粉，所以觉得很好看，给hbuider颜值打了高分。</p>
<h2 id="eclipse（my-eclipse）"><a href="#eclipse（my-eclipse）" class="headerlink" title="eclipse（my-eclipse）"></a>eclipse（my-eclipse）</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3vhdtgjij20x70cdn09.jpg" alt=""></p>
<ol>
<li>易用性 3分 </li>
<li>功能性 4分</li>
<li>颜值 1分</li>
<li>拓展性 4分</li>
<li>亮点：情怀</li>
<li>缺点：臃肿</li>
</ol>
<hr>
<p>用eclipse的应该大都是java开发的同学。eclipse是sun公司出品为java开发者提供的一款强大的ide，但近年来有被jetbrains的idea取代的趋势。老程序员应该都有过体验，功能强大，但臃肿卡顿而且不好看。如今搞java的可以看看idea，搞前端的可以看看hbuider。。。</p>
<h2 id="jetbrains系列的webstorm（js）-pycharm-python-phpstorm-php"><a href="#jetbrains系列的webstorm（js）-pycharm-python-phpstorm-php" class="headerlink" title="jetbrains系列的webstorm（js）,pycharm(python),phpstorm(php)"></a>jetbrains系列的<code>webstorm</code>（js）,<code>pycharm</code>(python),<code>phpstorm</code>(php)</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3vu3z3tsj21270liaek.jpg" alt=""></p>
<ol>
<li>易用性 2分 </li>
<li>功能性 5分</li>
<li>颜值 2+分</li>
<li>拓展性 2分</li>
<li>亮点：ide首选</li>
<li>缺点：是ide</li>
</ol>
<hr>
<p>如果一个开发者选择ide，而且不是在windows平台，那么jetbrains系列是首选。最强大的补全和项目构建功能，能交给机器的一切交给ide，开发者只负责开发逻辑，就是这么强大。至于扩展，ide本身足够强大就不用扩展。我不觉得jetbrains系列好看也没找到好看的皮肤。如果你能够接受用电脑性能换取其他的舒爽开发体验，那么再次强烈推荐jetbrains。</p>
<h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj3w925hrij20kt0cgte3.jpg" alt=""></p>
<ol>
<li>易用性 4分 </li>
<li>功能性 4分</li>
<li>颜值 4分</li>
<li>拓展性 4分</li>
<li>亮点：微软家出品，编辑markdown</li>
<li>缺点：都不是满分</li>
</ol>
<hr>
<p>最后的重头戏是我在用的第二个主力编辑器vscode。vscode各项评分没有短板，维护的团队也在很积极的更新，同样是用electron，却比Atom流畅的多。作为宇宙第一ide的轻巧版，vscode其实已经很强大了。vscode有自带终端，丰富的终端启动命令，集成git等等贴心的功能让vscode虽然没有sublime秒启动那么便捷，也没有Atom好看，插件不是最丰富的，功能没有一些ide那么强大，但其日常使用体验可以超过其他编辑器。更何况对于开发者来说用vscode编辑markdown的体验能秒杀一切其他md编辑器。</p>
<h2 id="打分图表"><a href="#打分图表" class="headerlink" title="打分图表"></a>打分图表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|     编辑器    | 易用性 | 功能性 | 颜值 | 拓展性 |                亮点               |         缺点         |</span><br><span class="line">|:-------------:|:------:|:------:|:----:|:------:|:---------------------------------:|:--------------------:|</span><br><span class="line">|    sublime    |    3   |    2   |   3  |    3   |            秒启动，情怀           | 略显老态 |</span><br><span class="line">|      Atom     |    5   |    3   |   5  |    5   |   高颜值，完全开源，扩展性非常高  |       性能堪忧       |</span><br><span class="line">|    Brackets   |    2   |    3   |   4  |    3   |           神奇的`cmd+e`           |   插件需要翻墙下载   |</span><br><span class="line">|    hbuider    |    4   |    4   |  4+  |    1   | 前端便捷代码snippets，app开发生态 |       拓展性低       |</span><br><span class="line">|    eclipse    |    3   |    4   |   1  |    4   |                情怀               |         臃肿         |</span><br><span class="line">| jetbrains系列 |    2   |    5   |  2+  |    2   |              ide首选              |         是ide        |</span><br><span class="line">|     vscode    |    4   |    4   |   4  |    4   |         微软家出品，编辑md        |      都不是满分      |</span><br></pre></td></tr></table></figure>
<p><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fj41a2tkm7j20mw08kdhb.jpg" alt=""></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>编辑器作为开发者的好伙伴是搭建一个舒适开发环境中重要的一环。现代程序员的编辑器大多不再是电影里那样的黑窗口直接用vi写文本了，功能强大的编辑器降低了程序员行业的入门门槛，让开发者更多精力放在开发逻辑上而不是环境搭建。<br>基本每个开发者都折腾过编辑器，每个编辑器都有不完美的地方，个人认为普通开发者应该把日常使用编辑器和开发ide使用场景分离，例如日常用编辑器sublime、vim、Atom、notpad++等轻型编辑器配合jetbrains系列，eclipse系列，vs系列使用，分离使用场景后才能让各编辑器发挥出最大能力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;评测的有,&lt;code&gt;sublime&lt;/code&gt;,&lt;code&gt;vscode&lt;/code&gt;,&lt;code&gt;atom&lt;/code&gt;,&lt;code&gt;brackets&lt;/code&gt;，&lt;code&gt;hbuider&lt;/code&gt;,&lt;code&gt;eclipse&lt;/code&gt;, jetbrains系列的&lt;code&gt;webstorm&lt;/code&gt;,&lt;code&gt;pycharm&lt;/code&gt;,&lt;code&gt;phpstorm&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;vim和EMACS不在测评列，部分ide虽在评测列但是用的不多可能不客观，宇宙第一ide(visual studio)没用过不评测。老古董notpad++等不评测。Dw这种非开发者使用工具不评测。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;本人主要使用mac，写web前端，少量写python，php等脚本语言，写c,java等需要编译的语言的请投vs和其他对应ide，markdown书写会在评测中占少量部分。&lt;/li&gt;
&lt;li&gt;本人认为合理的工作流是：简单预览和少量编辑的a编辑器加一个主力写代码的b编辑器。非要All in one的可以投vim和EMACS党。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;评测维度&quot;&gt;&lt;a href=&quot;#评测维度&quot; class=&quot;headerlink&quot; title=&quot;评测维度&quot;&gt;&lt;/a&gt;评测维度&lt;/h1&gt;&lt;p&gt;维度不太全，每个维度0~5分，打分是个人观点，不客观或有错误的轻喷。。。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;易用性&lt;br&gt;对开发者操作使用友好程度，汉化情况，下载难度，是否收费等方面。&lt;/li&gt;
&lt;li&gt;功能性&lt;br&gt;主要是补全提示，代码跳转，debug等&lt;/li&gt;
&lt;li&gt;拓展性&lt;br&gt;包括插件数量（只是个人感觉的数量），社区，可自定义程度&lt;/li&gt;
&lt;li&gt;颜值&lt;br&gt;这个就是主观程度了，可以忽略不看。&lt;/li&gt;
&lt;li&gt;亮点&lt;br&gt;会写我觉得编辑器最大的亮点，不打分&lt;/li&gt;
&lt;li&gt;缺点&lt;br&gt;会写我觉得编辑器最大的缺点，不打分&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="常用工具" scheme="http://lanbos.win/categories/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="代码编辑器" scheme="http://lanbos.win/tags/%E4%BB%A3%E7%A0%81%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>js的简单算法(二)</title>
    <link href="http://lanbos.win/2018/07/09/reading/arithmetic_fun02/"/>
    <id>http://lanbos.win/2018/07/09/reading/arithmetic_fun02/</id>
    <published>2018-07-09T08:02:30.668Z</published>
    <updated>2018-07-09T08:02:30.668Z</updated>
    
    <content type="html"><![CDATA[<p>通过一些博客和<em>《啊哈！算法》</em>了解js的栈，队列</p>
<h2 id="队列问题"><a href="#队列问题" class="headerlink" title="队列问题"></a>队列问题</h2><blockquote>
<p>队列的定义：队列是一种特 殊的线性结构,它只允许在队列的首部(head)进行删除操作,这称为“出队”,而在队列 的尾部(tail)进行插入操作,这称为“入队”。当队列中没有元素时(即 head==tail),称为 空队列</p>
</blockquote>
<p><em>《啊哈！算法》</em>中的一道题，大体意思是有一串密码规则为：首先将第 1 个数删除,紧接着将第 2 个数放到 这串数的末尾,再将第 3 个数删除并将第 4 个数放到这串数的末尾,再将第 5 个数删除…… 直到剩下最后一个数,将最后一个数也删除。按照刚才删除的顺序,把这些删除的数连在一 起就是这串密码，加密的数字为：“6 3 1 7 5 8 9 2 4”。书中阐述了基本思路，引入两个变量head(剩余数组的第一个元素)和tail(剩余数组的最后一个元素的下一个位置)通过移动head和tail的数值来生成新的数组。代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qqArray = [<span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sisRight = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> head = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> tail = arr.length;</span><br><span class="line">  <span class="keyword">var</span> results = [];</span><br><span class="line">  <span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">    results.push(arr[head]);</span><br><span class="line">    head++;</span><br><span class="line">    arr[tail] = arr[head];</span><br><span class="line">    tail++;</span><br><span class="line">    head++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br><span class="line">sisRight(qqArray); <span class="comment">//[6, 1, 5, 9, 4, 7, 2, 8, 3]</span></span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="栈的概念"><a href="#栈的概念" class="headerlink" title="栈的概念"></a>栈的概念</h2><blockquote>
<p>“栈（Stack）是限定仅在表尾进行插入或删除操作的线性表。表尾为栈顶（top），表头为栈底（bottom），不含元素的空表为空栈。栈又称为后进先出（last in first out）的线性表。”</p>
</blockquote>
<p>概念很抽象，大致可模拟理解为只允许一端push和pull的数组。还是通过<em>《啊哈！算法》</em>中的题来理解，题目是判断一个字符串是不是回文字符串（“所谓回文字符 串就是指正读反读均相同的字符序列,如“席主席”、“记书记”、“aha”和“ahaha”均是回 文,但“ahah”不是回文”）。思路是利用回文字符串中心对称的特点来进行解题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loopStr = <span class="string">"ahaha"</span>;</span><br><span class="line"><span class="keyword">var</span> ifLoopStr = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = str.length;</span><br><span class="line">  <span class="keyword">var</span> mid = len / <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> backMid = <span class="built_in">Math</span>.round(len / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> top = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> s = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= mid; i++) &#123;</span><br><span class="line">    top++;</span><br><span class="line">    s.push(str[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = backMid; j &lt; len; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[j] != s[top]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    top--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (top == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(ifLoopStr(loopStr));<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="纸牌游戏–小猫钓鱼（栈和队列综合问题）"><a href="#纸牌游戏–小猫钓鱼（栈和队列综合问题）" class="headerlink" title="纸牌游戏–小猫钓鱼（栈和队列综合问题）"></a>纸牌游戏–小猫钓鱼（栈和队列综合问题）</h2><p>游戏规则：游戏的规则是这样的:将一副扑克牌平均分成两份,每人拿一份。q1先拿出手中的 第一张扑克牌放在桌上,然后q2也拿出手中的第一张扑克牌,并放在q1刚打出的扑克牌 的上面,就像这样两人交替出牌。出牌时,如果某人打出的牌与桌上某张牌的牌面相同,即35啊哈!算法可将两张相同的牌及其中间所夹的牌全部取走,并依次放到自己手中牌的末尾。当任意一人 手中的牌全部出完时,游戏结束,对手获胜。<br>关键代码逻辑是，建一个作为标记的book数组，长度等于所有牌面的最大数字，然后在其中用0和1存储桌面上是否有出现的牌面。具体代码比较有意思，这里用js模拟了一下。(两人手里各有6张牌，牌面最大为9;q1手里牌是：2, 4, 1, 2, 5, 6；q2手里牌是：3, 1, 3, 5, 6, 4)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> q1 = &#123;</span><br><span class="line">  data: [<span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">6</span>],</span><br><span class="line">  head: <span class="number">0</span>,</span><br><span class="line">  tail: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> q2 = &#123;</span><br><span class="line">  data: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>],</span><br><span class="line">  head: <span class="number">0</span>,</span><br><span class="line">  tail: <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cardNum = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">playcard</span>(<span class="params">q1, q2, cardNum</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// init </span></span><br><span class="line">  <span class="keyword">var</span> _book = [];</span><br><span class="line">  <span class="keyword">var</span> _s = &#123;</span><br><span class="line">    data: [],</span><br><span class="line">    top: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> _t = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// init s</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; cardNum; i++) &#123;</span><br><span class="line">    _book.push(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// start play</span></span><br><span class="line">  <span class="keyword">while</span> (q1.head &lt; q1.tail &amp;&amp; q2.head &lt; q2.tail) &#123;</span><br><span class="line">    <span class="comment">// q1 put card</span></span><br><span class="line">    _t = q1.data[q1.head];</span><br><span class="line">    <span class="keyword">if</span> (_book[_t] == <span class="number">0</span>) &#123; <span class="comment">//q1 continu put</span></span><br><span class="line">      q1.head++;</span><br><span class="line">      _s.top++;</span><br><span class="line">      _s.data[_s.top] = _t;</span><br><span class="line">      _book[_t] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//q1 collect cards</span></span><br><span class="line">      q1.head++;</span><br><span class="line">      q1.data[q1.tail] = _t;</span><br><span class="line">      q1.tail++;</span><br><span class="line">      <span class="keyword">while</span> (_s.data[_s.top] != _t) &#123;</span><br><span class="line">        _book[_s.data[_s.top]] = <span class="number">0</span>;</span><br><span class="line">        q1.data[q1.tail] = _s.data[_s.top];</span><br><span class="line">        q1.tail++;</span><br><span class="line">        _s.top--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// q2 put card</span></span><br><span class="line">    _t = q2.data[q2.head];</span><br><span class="line">    <span class="keyword">if</span> (_book[_t] == <span class="number">0</span>) &#123; <span class="comment">//q2 continu put</span></span><br><span class="line">      q2.head++;</span><br><span class="line">      _s.top++;</span><br><span class="line">      _s.data[_s.top] = _t;</span><br><span class="line">      _book[_t] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">//q2 collect cards</span></span><br><span class="line">      q2.head++;</span><br><span class="line">      q2.data[q2.tail] = _t;</span><br><span class="line">      q2.tail++;</span><br><span class="line">      <span class="keyword">while</span> (_s.data[_s.top] != _t) &#123;</span><br><span class="line">        _book[_s.data[_s.top]] = <span class="number">0</span>;</span><br><span class="line">        q2.data[q2.tail] = _s.data[_s.top];</span><br><span class="line">        q2.tail++;</span><br><span class="line">        _s.top--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// win or lose</span></span><br><span class="line">  <span class="keyword">if</span> (q2.head == q2.tail) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"q1 win and his cards:"</span>);</span><br><span class="line">    <span class="keyword">var</span> _results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = q1.head; i &lt;= q1.tail - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      _results.push(q1.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(_results);</span><br><span class="line">    <span class="keyword">if</span> (_s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> deskR = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= _s.top; i++) &#123;</span><br><span class="line">        deskR.push(_s.data[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"cards on desk:"</span> + deskR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"desk empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"q2 win and his cards:"</span>);</span><br><span class="line">    <span class="keyword">var</span> _results = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = q2.head; i &lt;= q2.tail - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      _results.push(q2.data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(_results);</span><br><span class="line">    <span class="keyword">if</span> (_s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> deskR = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= _s.top; i++) &#123;</span><br><span class="line">        deskR.push(_s.data[i]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"cards on desk:"</span> + deskR);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"desk empty"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span><br><span class="line">&#125;</span><br><span class="line">playcard(q1, q2, cardNum);</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过一些博客和&lt;em&gt;《啊哈！算法》&lt;/em&gt;了解js的栈，队列&lt;/p&gt;
&lt;h2 id=&quot;队列问题&quot;&gt;&lt;a href=&quot;#队列问题&quot; class=&quot;headerlink&quot; title=&quot;队列问题&quot;&gt;&lt;/a&gt;队列问题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;队列的定义：队列是一种特 殊的线性结构,它只允许在队列的首部(head)进行删除操作,这称为“出队”,而在队列 的尾部(tail)进行插入操作,这称为“入队”。当队列中没有元素时(即 head==tail),称为 空队列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;《啊哈！算法》&lt;/em&gt;中的一道题，大体意思是有一串密码规则为：首先将第 1 个数删除,紧接着将第 2 个数放到 这串数的末尾,再将第 3 个数删除并将第 4 个数放到这串数的末尾,再将第 5 个数删除…… 直到剩下最后一个数,将最后一个数也删除。按照刚才删除的顺序,把这些删除的数连在一 起就是这串密码，加密的数字为：“6 3 1 7 5 8 9 2 4”。书中阐述了基本思路，引入两个变量head(剩余数组的第一个元素)和tail(剩余数组的最后一个元素的下一个位置)通过移动head和tail的数值来生成新的数组。代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; qqArray = [&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sisRight = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; head = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; tail = arr.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; results = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (head &amp;lt; tail) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    results.push(arr[head]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arr[tail] = arr[head];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tail++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    head++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; results;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sisRight(qqArray); &lt;span class=&quot;comment&quot;&gt;//[6, 1, 5, 9, 4, 7, 2, 8, 3]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="算法" scheme="http://lanbos.win/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>碎碎念一篇</title>
    <link href="http://lanbos.win/2018/07/09/todo_201609/"/>
    <id>http://lanbos.win/2018/07/09/todo_201609/</id>
    <published>2018-07-09T08:02:30.668Z</published>
    <updated>2018-07-09T08:02:30.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念之前"><a href="#碎碎念之前" class="headerlink" title="碎碎念之前"></a>碎碎念之前</h2><p>之前看了知乎上有问题，“使用 GitHub Pages 来做博客是否道德？”对于这个问题一直在用盗版软件的我感觉有点够不到层次来回答，我先就这么鸡贼的用了，怕被墙还挂了国内的coding（国内一个非常好的代码托管平台，虽然git@osc在操作上更类似github，但是体验和github与coding有一定差距）。<br>15块买了三年域名用github提供的免费服务器和开源的hexo系统花了一天时间把博客基本搭了个样子。反正就是这么鸡贼的借技术博客的名义找了个能让我碎碎念的地方。就像那句话说的“不偷鸡，跟咸鱼有什么区别！”<br><a id="more"></a></p>
<h2 id="还是说博客"><a href="#还是说博客" class="headerlink" title="还是说博客"></a>还是说博客</h2><p>个人既然碎碎念第一篇挂在了todo上就说一下博客的计划。<br>写博客是个包装自己并加深学习印象的好方式，之前大多数学习的笔记都是简单的写在了“为知”上，林林总总有二百多篇，中间还经历了一次从印象笔记转到为知笔记时删除了许多的过程，笔记的剪报是个好功能，看到了好的文章和有用的代码块直接用剪报建了下来然后就扔到了层层文件夹中，只有突然遇到问题的时候才会用检索查一下。所以当时对笔记的要求就是剪报和检索功能一定要强大博客系统不想再走这样的老路子，虽然博客也加了站内检索功能，但是希望是输出一些更多是自己手打的内容，这样才能起到加深印象的作用。当然博客可能会穿插一些像这样的碎碎念内容和感性思维突然抽风写下的苦逼文字。</p>
<h3 id="博客文章计划"><a href="#博客文章计划" class="headerlink" title="博客文章计划"></a>博客文章计划</h3><p>会逐渐把之前为知笔记上的一些内容移植到博客中，在移植的过程中会自己手打一些自己的理解加上去，不会像之前在笔记上只是简单的粘贴了代码，写了简单的注释，这样才能像个博客。分类方面应该主要是web前端、node和python的一些入门内容，保证一周一篇的更新速度，时隔多年又有了写周记的感觉。<br>虽然不会有什么浏览量，但是在写的过程必然会出错，万一被人指出的话，的确很尴尬，所以要写的严谨，但是严谨过度就失去了写博客的乐趣，变成了写毕业论文，所以我还是会千方百计的为自己的偷懒找借口，保证基本严谨的情况下坚持随意的风格。。。<br>除了技术博客，碎碎念和苦逼文字的比重会不定期添加，之前读书时代有很多苦逼文字，筛选一些不太可笑的会放上来。碎碎念会是对书籍，电影，网络热门话题，生活状态等情况的吐槽，但愿这方便不会大量充斥到整个博客中，先对自己限制一下发一篇碎碎念必须搞一篇技术相关的来补坑。</p>
<h3 id="博客美化计划"><a href="#博客美化计划" class="headerlink" title="博客美化计划"></a>博客美化计划</h3><p>博客鸡贼的用了开源的hexo和免费的github pages就要面临没有数据库动态更新的尴尬，毕竟有免费的代价。hexo用了ejs模板还是比较简单易懂的，配合简单的js和css应该能做一些美化。当前用了简单的light主题，看到很多人都在用next主题，我正在考虑换主题，甚至自己尝试制作一个皮肤。当前light主题有一些问题，代码块不太好看，引用模块采用的是居中斜体，文章导航位置不科学等问题，随后会一一想办法解决。</p>
<h2 id="更远的计划和其他"><a href="#更远的计划和其他" class="headerlink" title="更远的计划和其他"></a>更远的计划和其他</h2><p>hexo虽然方便但是每次静态化和部署到github与coding感觉耗时不少，看网上说每次静态化过程都在遍历整个文章随着文章量增加会越来越耗时，到时可能就得考虑租服务器重新搭建网站了。而且用hexo搭建博客除了少量的折腾乐趣外其实对于写博客这件事，无论是从传播还是时间成本和便利性上来说性价比并不高。看到很多人都在用简书和微信公众号等方式传播内容，好在markdown的方式写作可移植性比较高，等有一定文章量后，也会在简书之类的平台上更新一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;碎碎念之前&quot;&gt;&lt;a href=&quot;#碎碎念之前&quot; class=&quot;headerlink&quot; title=&quot;碎碎念之前&quot;&gt;&lt;/a&gt;碎碎念之前&lt;/h2&gt;&lt;p&gt;之前看了知乎上有问题，“使用 GitHub Pages 来做博客是否道德？”对于这个问题一直在用盗版软件的我感觉有点够不到层次来回答，我先就这么鸡贼的用了，怕被墙还挂了国内的coding（国内一个非常好的代码托管平台，虽然git@osc在操作上更类似github，但是体验和github与coding有一定差距）。&lt;br&gt;15块买了三年域名用github提供的免费服务器和开源的hexo系统花了一天时间把博客基本搭了个样子。反正就是这么鸡贼的借技术博客的名义找了个能让我碎碎念的地方。就像那句话说的“不偷鸡，跟咸鱼有什么区别！”&lt;br&gt;
    
    </summary>
    
      <category term="todo" scheme="http://lanbos.win/categories/todo/"/>
    
    
      <category term="todo" scheme="http://lanbos.win/tags/todo/"/>
    
  </entry>
  
  <entry>
    <title>js的简单算法</title>
    <link href="http://lanbos.win/2018/07/09/reading/arithmetic_fun01/"/>
    <id>http://lanbos.win/2018/07/09/reading/arithmetic_fun01/</id>
    <published>2018-07-09T08:02:30.667Z</published>
    <updated>2018-07-09T08:02:30.667Z</updated>
    
    <content type="html"><![CDATA[<p>js是弱类型语言，不太适合研究算法和数据结构，这里只是研究一下粗浅的算法，也是对算法入门书籍<em>《啊哈，算法》</em>的一点读书笔记。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序的基本思想是:每次比较两个相邻的元素,如果它们的顺序错误就把它们交换 过来。如果有N个需要排序的数字的话，需要循环(N-1)*(N-1)次，排序的复杂程度是O(N²)；<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js冒泡排序</span></span><br><span class="line"><span class="keyword">var</span> testArry=[<span class="number">8</span>,<span class="number">100</span>,<span class="number">29</span>,<span class="number">1</span>,<span class="number">888</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">33</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeRight</span>(<span class="params">testArry</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> aLen=testArry.length;</span><br><span class="line">	<span class="keyword">var</span> a=[];</span><br><span class="line">	<span class="keyword">var</span> midKey=<span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aLen;i++)&#123;</span><br><span class="line">		a.push(testArry[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;aLen<span class="number">-1</span>;j++)&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> k=<span class="number">0</span>;k&lt;aLen<span class="number">-1</span>;k++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[k]&lt;a[k+<span class="number">1</span>])&#123;</span><br><span class="line">				midKey=a[k];</span><br><span class="line">				a[k]=a[k+<span class="number">1</span>];</span><br><span class="line">				a[k+<span class="number">1</span>]=midKey;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">makeRight(testArry);</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>“快速排序”的思想很简单，整个排序过程只需要三步：<br>1.在数据集之中，选择一个元素作为”基准”（pivot）。<br>2.所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。<br>3.对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> testArry=[<span class="number">8</span>,<span class="number">100</span>,<span class="number">29</span>,<span class="number">1</span>,<span class="number">888</span>,<span class="number">15</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">33</span>];</span><br><span class="line"><span class="keyword">var</span> quickSort=<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(arr.length&lt;=<span class="number">1</span>)&#123;<span class="keyword">return</span> arr;&#125;</span><br><span class="line">	<span class="keyword">var</span> pivotIndex=<span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>);</span><br><span class="line">	<span class="keyword">var</span> pivot=arr.splice(pivotIndex,<span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">var</span> left=[];</span><br><span class="line">	<span class="keyword">var</span> right=[];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(arr[i]&lt;pivot)&#123;</span><br><span class="line">			left.push(arr[i]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			right.push(arr[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> quickSort(left).concat([pivot],quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line">quickSort(testArry);</span><br></pre></td></tr></table></figure></p>
<p>(参考自阮一峰的《快速排序（Quicksort）的Javascript实现》)</p>
<h2 id="排序去重"><a href="#排序去重" class="headerlink" title="排序去重"></a>排序去重</h2><p>利用之前的快速排序，循环快速排序生成的数组，每两个对比然后把不一样的放进一个新的数组中返回<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> noRepeat = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> sortArry=quickSort(arr);</span><br><span class="line">  <span class="keyword">var</span> results=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sortArry.length;i++)&#123;</span><br><span class="line">  	<span class="keyword">if</span>(sortArry[i]!=sortArry[i+<span class="number">1</span>])&#123;</span><br><span class="line">  		results.push(sortArry[i]);</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;js是弱类型语言，不太适合研究算法和数据结构，这里只是研究一下粗浅的算法，也是对算法入门书籍&lt;em&gt;《啊哈，算法》&lt;/em&gt;的一点读书笔记。&lt;/p&gt;
&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;&lt;p&gt;冒泡排序的基本思想是:每次比较两个相邻的元素,如果它们的顺序错误就把它们交换 过来。如果有N个需要排序的数字的话，需要循环(N-1)*(N-1)次，排序的复杂程度是O(N²)；&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// js冒泡排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; testArry=[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;888&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;makeRight&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;testArry&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aLen=testArry.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a=[];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; midKey=&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;aLen;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		a.push(testArry[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; j=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;j&amp;lt;aLen&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;j++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;k&amp;lt;aLen&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;k++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[k]&amp;lt;a[k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				midKey=a[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[k]=a[k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				a[k+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]=midKey;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;makeRight(testArry);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="算法" scheme="http://lanbos.win/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo遇到搜索问题小记</title>
    <link href="http://lanbos.win/2018/07/09/hexo/hexo_problem01/"/>
    <id>http://lanbos.win/2018/07/09/hexo/hexo_problem01/</id>
    <published>2018-07-09T08:02:30.666Z</published>
    <updated>2018-07-09T08:02:30.666Z</updated>
    
    <content type="html"><![CDATA[<p>使用了next主题，<a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">next官方文档</a>上提供了多种支持搜索的方法，之前用过<code>Swiftype</code>方案，但是服务不太稳定，想了使用本地搜索的方案</p>
<h1 id="安装后问题显现"><a href="#安装后问题显现" class="headerlink" title="安装后问题显现"></a>安装后问题显现</h1><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p>
<p>站点配置文件：<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">search.xml</span></span><br><span class="line"><span class="attr">  field:</span> <span class="string">post</span></span><br><span class="line"><span class="attr">  format:</span> <span class="string">html</span></span><br><span class="line"><span class="attr">  limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p>
<p>  主题配置文件：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  # Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure></p>
<p>  配置完成重启后，顶部<code>搜索</code>出现但是点击没有反应。开始排查：<br>  <a id="more"></a><br>  <img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fiw03w6jt3j20da027a9y.jpg" alt=""></p>
<h1 id="排查过程（可忽略不看）"><a href="#排查过程（可忽略不看）" class="headerlink" title="排查过程（可忽略不看）"></a>排查过程（可忽略不看）</h1><p>  hexo项目内搜索<code>search.xml</code>,找到<code>localsearch.swig</code>文件，找到ajax对应代码部分，小吐槽一下，看到源码发现写的如此简单粗暴。。。打开首页跟了下代码，发现ajax请求访问失败了。因为源码中没有写访问失败的调试报错，所以没有显现。加了代码之后发现问题是xml解析错误，有不符合utf8的字符。</p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>  找到是因为生成的<code>search.xml</code>解析错误就很好排查了，进入<a href="http://tool.oschina.net/codeformat/xml" target="_blank" rel="noopener">xml格式检查网站</a>,把<code>search.xml</code>粘进去一点一点找到报错的地方。最后发现是文章里有一处用了特殊字符，（前段时间vscode和搜狗配合使用会莫名其妙出一些特殊字符），删掉后<code>hexo g</code>重启，问题解决。<br>  <img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1fiw0jy3jy5j20qg06sq3i.jpg" alt=""></p>
<h1 id="附上自己的localsearch-swig"><a href="#附上自己的localsearch-swig" class="headerlink" title="附上自己的localsearch.swig"></a>附上自己的localsearch.swig</h1><p>  源码简单粗暴，我本来想封装一下顺便改改弹窗样式，但犯懒了，就加了个请求错误报错的代码，帮助排查，随后有空加改吧<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">  &#123;% if config.search.path %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Popup Window;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> isfetched = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// Search DB path;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> search_path = <span class="string">"&#123;&#123; config.search.path &#125;&#125;"</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (search_path.length == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">    search_path = <span class="string">"search.xml"</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> path = <span class="string">"&#123;&#123; config.root &#125;&#125;"</span> + search_path;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// monitor main search box;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">proceedsearch</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">"body"</span>).append(<span class="string">'&lt;div class="popoverlay"&gt;'</span>).css(<span class="string">'overflow'</span>, <span class="string">'hidden'</span>);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.popup'</span>).toggle();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// search function;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span> (<span class="params">path, search_id, content_id</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $.ajax(&#123;</span></span><br><span class="line"><span class="undefined">      url: path,</span></span><br><span class="line"><span class="javascript">      dataType: <span class="string">"xml"</span>,</span></span><br><span class="line"><span class="javascript">      <span class="keyword">async</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      success: <span class="function"><span class="keyword">function</span> (<span class="params">xmlResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// get the contents from search data</span></span></span><br><span class="line"><span class="javascript">        isfetched = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.popup'</span>).detach().appendTo(<span class="string">'.header-inner'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> datas = $(<span class="string">"entry"</span>, xmlResponse).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            title: $(<span class="string">"title"</span>, <span class="keyword">this</span>).text(),</span></span><br><span class="line"><span class="javascript">            content: $(<span class="string">"content"</span>, <span class="keyword">this</span>).text(),</span></span><br><span class="line"><span class="javascript">            url: $(<span class="string">"url"</span>, <span class="keyword">this</span>).text()</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;).get();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</span></span><br><span class="line"><span class="javascript">        $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> matchcounts = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> str = <span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</span></span><br><span class="line"><span class="javascript">          $resultContent.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// perform local searching</span></span></span><br><span class="line"><span class="javascript">            datas.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> isMatch = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> content_index = [];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>).toLowerCase();</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> data_url = <span class="built_in">decodeURIComponent</span>(data.url);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> index_title = <span class="number">-1</span>;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> index_content = <span class="number">-1</span>;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// only match artiles with not empty titles and contents</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (data_title != <span class="string">''</span>) &#123;</span></span><br><span class="line"><span class="javascript">                keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword, i</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                  index_title = data_title.indexOf(keyword);</span></span><br><span class="line"><span class="undefined">                  index_content = data_content.indexOf(keyword);</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (index_title &gt;= <span class="number">0</span> || index_content &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    isMatch = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">                      first_occur = index_content;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">                &#125;);</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="comment">// show search results</span></span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (isMatch) &#123;</span></span><br><span class="line"><span class="undefined">                matchcounts += 1;</span></span><br><span class="line"><span class="xml">                str += "<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">'" + data_url + "'</span> <span class="attr">class</span>=<span class="string">'search-result-title'</span>&gt;</span>" + data_title +</span></span><br><span class="line"><span class="javascript">                  <span class="string">"&lt;/a&gt;"</span>;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>, <span class="string">""</span>);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// cut out 100 characters</span></span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    start = 0;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (start == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="undefined">                    end = 50;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">if</span> (end &gt; content.length) &#123;</span></span><br><span class="line"><span class="undefined">                    end = content.length;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> match_content = content.substring(start, end);</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// highlight all keywords</span></span></span><br><span class="line"><span class="javascript">                  keywords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">keyword</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</span></span><br><span class="line"><span class="xml">                    match_content = match_content.replace(regS, "<span class="tag">&lt;<span class="name">b</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">search-keyword</span>\"&gt;</span>" +</span></span><br><span class="line"><span class="javascript">                      keyword + <span class="string">"&lt;/b&gt;"</span>);</span></span><br><span class="line"><span class="undefined">                  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">                  str += "<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">\</span>"<span class="attr">search-result</span>\"&gt;</span>" + match_content + "...<span class="tag">&lt;/<span class="name">p</span>&gt;</span>"</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                str += <span class="string">"&lt;/li&gt;"</span>;</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined">          &#125;;</span></span><br><span class="line"><span class="javascript">          str += <span class="string">"&lt;/ul&gt;"</span>;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (matchcounts == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="xml">            str = '<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"no-result"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-frown-o fa-5x"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (keywords == <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="xml">            str = '<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"no-result"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-search fa-5x"</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">          $resultContent.innerHTML = str;</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined">        proceedsearch();</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="javascript">    &#125;).fail(<span class="function"><span class="keyword">function</span> (<span class="params">data, errStr, err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(errStr);</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(err);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// handle and trigger popup window;</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.popup-trigger'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    e.stopPropagation();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (isfetched == <span class="literal">false</span>) &#123;</span></span><br><span class="line"><span class="javascript">      searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">      proceedsearch();</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">renderData</span>(<span class="params">xmlResponse</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.popup-btn-close'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.popup'</span>).hide();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".popoverlay"</span>).remove();</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'body'</span>).css(<span class="string">'overflow'</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'.popup'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">    e.stopPropagation();</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用了next主题，&lt;a href=&quot;http://theme-next.iissnan.com/third-party-services.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;next官方文档&lt;/a&gt;上提供了多种支持搜索的方法，之前用过&lt;code&gt;Swiftype&lt;/code&gt;方案，但是服务不太稳定，想了使用本地搜索的方案&lt;/p&gt;
&lt;h1 id=&quot;安装后问题显现&quot;&gt;&lt;a href=&quot;#安装后问题显现&quot; class=&quot;headerlink&quot; title=&quot;安装后问题显现&quot;&gt;&lt;/a&gt;安装后问题显现&lt;/h1&gt;&lt;p&gt;安装&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install hexo-generator-searchdb --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;站点配置文件：&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;search:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  path:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;search.xml&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  field:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;post&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  format:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  limit:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  主题配置文件：&lt;br&gt;  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  # Local search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;local_search:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;  配置完成重启后，顶部&lt;code&gt;搜索&lt;/code&gt;出现但是点击没有反应。开始排查：&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="hexo" scheme="http://lanbos.win/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>hexo其他问题</title>
    <link href="http://lanbos.win/2018/07/09/hexo/hexo_others/"/>
    <id>http://lanbos.win/2018/07/09/hexo/hexo_others/</id>
    <published>2018-07-09T08:02:30.665Z</published>
    <updated>2018-07-09T08:02:30.665Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录了一些hexo在使用过程中的一些较为高级使用方式。</p>
<h2 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h2><h3 id="1-使用情景"><a href="#1-使用情景" class="headerlink" title="1.使用情景"></a>1.使用情景</h3><p>我习惯把自己的blog当做个人的私人笔记，虽然很多人不建议这么做，因为有各种其他的代替品如：<a href="http://www.wiz.cn/" target="_blank" rel="noopener">为知笔记</a>，印象笔记等，但是很多笔记不具备分享功能，或者分享功能会另外收费。blog天生具备的传播性很适合作为需要分享的笔记的载体，但之前了解的hexo只是普通的blog功能，作为个人笔记的话又缺少私密性。最近发现的hexo原本具有的草稿功能可以完美解决这个问题。</p>
<h3 id="2-创建草稿"><a href="#2-创建草稿" class="headerlink" title="2.创建草稿"></a>2.创建草稿</h3><p>首先进入<code>source/</code>目录，之前发布的正式blog都是在<code>_posts</code>目录下新建的markdown文件，若是想创建一篇草稿的话需要创建一个新的目录<code>_draft</code>,创建的草稿不会发布到github上，而且不设置的话hexo甚至不会处理草稿。<br><a id="more"></a></p>
<h3 id="3-预览草稿"><a href="#3-预览草稿" class="headerlink" title="3.预览草稿"></a>3.预览草稿</h3><p>作为个人笔记的话当然草稿是需要自己能看到但是别人是无法看到的。首先打开<code>_config.yml</code>，设置<code>render_drafts</code>为<code>false</code>。然后重新启动hexo服务。变化命令为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000 --draft</span><br></pre></td></tr></table></figure></p>
<p>再预览的话就草稿就能显示出来了。再运行：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></p>
<p>会发现草稿不会提交到github上，但是可以在本地预览。若是想把草稿正式发布到blog上，一种做法是把草稿复制一份到<code>_posts</code>，然后再执行发布命令。或者用<code>publish</code>命令把草稿发布到正式blog中。</p>
<h2 id="hexo命令备忘"><a href="#hexo命令备忘" class="headerlink" title="hexo命令备忘"></a>hexo命令备忘</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新建blog</span></span><br><span class="line">hexo n &lt;title&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">新建草稿</span></span><br><span class="line">hexo n draft &lt;title&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">发布草稿到正式blog</span></span><br><span class="line">hexo publish &lt;title&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">启动服务</span></span><br><span class="line">hexo s -p5000</span><br><span class="line"><span class="meta">#</span><span class="bash">启动服务并预览草稿</span></span><br><span class="line">hexo s -p5000 --draft</span><br><span class="line"><span class="meta">#</span><span class="bash">blog静态化</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="meta">#</span><span class="bash">blog静态化并发布</span></span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>
<h2 id="hexo同时发布到coding和github"><a href="#hexo同时发布到coding和github" class="headerlink" title="hexo同时发布到coding和github"></a>hexo同时发布到coding和github</h2><h3 id="1-情景"><a href="#1-情景" class="headerlink" title="1.情景"></a>1.情景</h3><p>github国内众所周知的原因不太稳定，国内有很多优秀的代码托管工具，我一直在用的是淘宝开源的git@osc(码云)，但是奈何之前git@osc没有github的pages功能，看到了<a href="http://www.jianshu.com/p/2cbf3e2f6d57" target="_blank" rel="noopener">这篇博文</a>,知道了coding平台支持pages的功能。</p>
<h3 id="2-在coding上的配置"><a href="#2-在coding上的配置" class="headerlink" title="2.在coding上的配置"></a>2.在coding上的配置</h3><p>登录coding，注册登录就不提了，首先新建一个和自己用户命相同的公开项目，然后就是设置ssh:</p>
<blockquote>
<p>1.打开个人中心的SSH公匙<br>2.如果之前配置过GitHub的公匙的话直接打开,.ssh文件夹里面的_rsa.pub,比如我的是pvphero_rsa.pub,然后将里面的内容全部复制,填写到ssh_rsa公匙处,公匙的名称可以随便起,然后点击’添加’,再接着输入密码就可以完成添加了<br><img src="http://upload-images.jianshu.io/upload_images/1671183-4305eea4f746974b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>添加后测试一下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@git.coding.net</span><br></pre></td></tr></table></figure></p>
<p>如果出现下面的提示则表示公匙添加成功了:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello shenzhenwei You've connected to Coding.net by SSH successfully!</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-hexo配置"><a href="#2-hexo配置" class="headerlink" title="2.hexo配置"></a>2.hexo配置</h3><p>首先配置_config.yml文件<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span></span><br><span class="line"><span class="attr">      github:</span> <span class="attr">https://github.com/lanbos/lanbos.github.io.git,master</span></span><br><span class="line"><span class="attr">      coding:</span> <span class="attr">https://git.coding.net/lanbos/lanbos.git,master</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-万网域名双线解析"><a href="#3-万网域名双线解析" class="headerlink" title="3.万网域名双线解析"></a>3.万网域名双线解析</h3><p>进入万网/阿里云后台，域名解析：<br><img src="http://photo.yangmaoxin.cn/githubcoding.png" alt=""><br>添加两条CNAME，分别解析，解析路线选择默认至Coding，海外IP至GitHub。</p>
<h2 id="hexo单页运行js代码"><a href="#hexo单页运行js代码" class="headerlink" title="hexo单页运行js代码"></a>hexo单页运行js代码</h2><p>其实这是markdown语法的功能，但放在这里的话也算hexo的一点小奇技淫巧，有时候在某篇blog中需要运行单独的js，或者css、html，直接按照html语法写入就可以了，比如可以这么写：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 标题</span><br><span class="line">内容</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>html内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">p&#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">alert(<span class="string">"test"</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这种混写的方式html、css、js代码都会生效，但是需要尽量少用，否则会破坏markdown文件的可读性。在标题处加入<code>layout: false</code>会使整片文章不引用公共的主题样式。</p>
<h2 id="代替多说的评论系统"><a href="#代替多说的评论系统" class="headerlink" title="代替多说的评论系统"></a>代替多说的评论系统</h2><p>多说最近总报错，disqus又被墙，查了一下，网上说<a href="http://www.uyan.cc" target="_blank" rel="noopener">友言</a>比较好，用了一下非常简单，只需要注册让后拷贝代码到页面模板的对应位置即可，只不过这种免费的评论系统能维持多长时间就不知道了。</p>
<h2 id="rsync将blog部署到自己的服务器"><a href="#rsync将blog部署到自己的服务器" class="headerlink" title="rsync将blog部署到自己的服务器"></a>rsync将blog部署到自己的服务器</h2><ol>
<li>在<code>_config.yml</code>中进行如下配置，服务器端需要安装rsync<br><img src="https://ws1.sinaimg.cn/large/5c9d16d6ly1ficotrdqz9j20ge0etq43.jpg" alt=""></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录了一些hexo在使用过程中的一些较为高级使用方式。&lt;/p&gt;
&lt;h2 id=&quot;草稿功能&quot;&gt;&lt;a href=&quot;#草稿功能&quot; class=&quot;headerlink&quot; title=&quot;草稿功能&quot;&gt;&lt;/a&gt;草稿功能&lt;/h2&gt;&lt;h3 id=&quot;1-使用情景&quot;&gt;&lt;a href=&quot;#1-使用情景&quot; class=&quot;headerlink&quot; title=&quot;1.使用情景&quot;&gt;&lt;/a&gt;1.使用情景&lt;/h3&gt;&lt;p&gt;我习惯把自己的blog当做个人的私人笔记，虽然很多人不建议这么做，因为有各种其他的代替品如：&lt;a href=&quot;http://www.wiz.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为知笔记&lt;/a&gt;，印象笔记等，但是很多笔记不具备分享功能，或者分享功能会另外收费。blog天生具备的传播性很适合作为需要分享的笔记的载体，但之前了解的hexo只是普通的blog功能，作为个人笔记的话又缺少私密性。最近发现的hexo原本具有的草稿功能可以完美解决这个问题。&lt;/p&gt;
&lt;h3 id=&quot;2-创建草稿&quot;&gt;&lt;a href=&quot;#2-创建草稿&quot; class=&quot;headerlink&quot; title=&quot;2.创建草稿&quot;&gt;&lt;/a&gt;2.创建草稿&lt;/h3&gt;&lt;p&gt;首先进入&lt;code&gt;source/&lt;/code&gt;目录，之前发布的正式blog都是在&lt;code&gt;_posts&lt;/code&gt;目录下新建的markdown文件，若是想创建一篇草稿的话需要创建一个新的目录&lt;code&gt;_draft&lt;/code&gt;,创建的草稿不会发布到github上，而且不设置的话hexo甚至不会处理草稿。&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="hexo" scheme="http://lanbos.win/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>webpack多页面项目实践</title>
    <link href="http://lanbos.win/2018/07/09/FE/wepackPages/"/>
    <id>http://lanbos.win/2018/07/09/FE/wepackPages/</id>
    <published>2018-07-09T08:02:30.664Z</published>
    <updated>2018-07-09T08:02:30.664Z</updated>
    
    <content type="html"><![CDATA[<p>尽管当下SPA横行，但是多页面项目依然有其存在的意义，webpack这件工具基本是为了SPA而专门准备的，网上看到很多利用webpack构建多页面的教程都是用gulp来配合使用的，在网上看大了一个思路只需对webpack简单配置一下就能实现大多数情景下的多页面项目。本文在vue-cli2.0的基础上做了对多页面vue项目的扩充。</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>首先webpack的思想是用js来构建项目的一切，即html只有一个外壳载体，项目的入口文件和执行文件为js，多页面项目肯定是多个入口文件。然后对不同的页面引入不同的入口文件。即：</p>
<ol>
<li>设置<code>weback.base.coonf.js</code>中的<code>entry</code>,从单一入口变为多入口配置项</li>
<li>在dev和prod的配置项中利用<code>HtmlWebpackPlugin</code>插件来对各个页面引入不同的入口js文件<a id="more"></a>
<h2 id="目录生成"><a href="#目录生成" class="headerlink" title="目录生成"></a>目录生成</h2>第一层目录概览：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── build</span><br><span class="line">├── config</span><br><span class="line">├── dist</span><br><span class="line">├── index.html</span><br><span class="line">├── node_modules</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">├── pages <span class="comment"># 多页面html存放目录</span></span><br><span class="line">├── src <span class="comment">#主要源码</span></span><br><span class="line">└── static</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>src</code>目录主要结构：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── App.vue <span class="comment">#外壳</span></span><br><span class="line">├── assets <span class="comment"># 静态自愿存放</span></span><br><span class="line">├── components <span class="comment">#组件目录</span></span><br><span class="line">├── main.js <span class="comment">#第一个入口文件保留</span></span><br><span class="line">├── pages <span class="comment">#其他页面入口文件存放处</span></span><br><span class="line">├── router <span class="comment">#路由</span></span><br><span class="line">└── store <span class="comment">#vuex相关</span></span><br></pre></td></tr></table></figure></p>
<h2 id="扩展工具方法"><a href="#扩展工具方法" class="headerlink" title="扩展工具方法"></a>扩展工具方法</h2><p>在<code>build/utils.js</code>底部增加方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多页面设置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SetPages</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">this</span>.pagesArr=[]</span><br><span class="line">    <span class="keyword">this</span>.pagesDir=path.resolve(__dirname,<span class="string">'../pages/'</span>);</span><br><span class="line">    <span class="keyword">this</span>.pages=[];</span><br><span class="line">    <span class="keyword">this</span>.pagesEntrys=&#123;</span><br><span class="line">      app: <span class="string">'./src/main.js'</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">   init()&#123;</span><br><span class="line">    <span class="keyword">this</span>.pagesArr= fs.readdirSync(<span class="keyword">this</span>.pagesDir);</span><br><span class="line">    <span class="keyword">this</span>.pagesArr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> fName=path.basename(v, <span class="string">'.html'</span>);</span><br><span class="line">      <span class="keyword">let</span> temp=&#123;</span><br><span class="line">        filename: <span class="string">""</span>,</span><br><span class="line">        template: <span class="string">''</span>,</span><br><span class="line">        chunks:[<span class="string">'manifest'</span>,<span class="string">'vendor'</span>,fName],<span class="comment">//设置允许加载的模块</span></span><br><span class="line">        inject: <span class="literal">true</span>,</span><br><span class="line">        minify: &#123;</span><br><span class="line">          removeComments: <span class="literal">true</span>,</span><br><span class="line">          collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">          removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">      &#125;</span><br><span class="line">      temp.filename=path.resolve(__dirname, <span class="string">'../dist/'</span>+v);</span><br><span class="line">      temp.template=path.resolve(__dirname,<span class="keyword">this</span>.pagesDir+<span class="string">'/'</span>+v);</span><br><span class="line">      <span class="keyword">this</span>.pages.push(temp);</span><br><span class="line">      <span class="keyword">this</span>.pagesEntrys[fName]=<span class="string">`./src/pages/<span class="subst">$&#123;fName&#125;</span>.js`</span></span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> setPages=<span class="keyword">new</span> SetPages();</span><br><span class="line">setPages.init();</span><br><span class="line">exports.setPages= setPages.pages;</span><br><span class="line">exports.pagesEntrys=setPages.pagesEntrys;<span class="comment">//设置各个入口js</span></span><br></pre></td></tr></table></figure></p>
<p>该扩展方法主要目的就是读取<code>pages</code>目录下所有的文件名字，生成一个<code>entry</code>入口文件配置项，并去<code>src/pages</code>找到同名的js文件在html中引入。</p>
<h2 id="在各配置文件下使用"><a href="#在各配置文件下使用" class="headerlink" title="在各配置文件下使用"></a>在各配置文件下使用</h2><ol>
<li><p><code>build/weback.base.coonf.js</code>中使用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  context: path.resolve(__dirname, <span class="string">'../'</span>),</span><br><span class="line">  entry: utils.pagesEntrys,<span class="comment">//引入生成的入口文件配置项</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: config.build.assetsRoot,</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ?</span><br><span class="line">      config.build.assetsPublicPath :</span><br><span class="line">      config.dev.assetsPublicPath</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>build/weback.dev.coonf.js</code>和<code>build/weback.pod.coonf.js</code>中都插入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制多页面任务</span></span><br><span class="line"><span class="keyword">if</span>(utils.setPages.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">  utils.setPages.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    v.minify=&#123;&#125;</span><br><span class="line">    devWebpackConfig.plugins.push(</span><br><span class="line">      <span class="keyword">new</span> HtmlWebpackPlugin(v)</span><br><span class="line">    )</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="多页面开发流程"><a href="#多页面开发流程" class="headerlink" title="多页面开发流程"></a>多页面开发流程</h2><p>在第一层目录<code>pages</code>中新建一个<code>about.html</code>文件，内容复制<code>index.html</code>中的即可，然后在<code>util/pages</code>目录下新建一个与之前生成的html同名的<code>about.js</code>，这个js文件就是一个页面的入口文件，在其中进行开发即可。打包时也会单独打包出一个<code>about.js</code>对应一个页面<code>about.html</code>。</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol>
<li>当页面中引入了过多的第三方库会造成打包出的vendor.js体积过大。解决方案为把不经常改变的第三方库单独用script cdn加载，如lodash，jquery等。强烈建议对element-ui等ui库一定要按需引入组件，否则很容易造成vendor过大。</li>
<li>打包时间很长，不仅是多页面，spa项目里webpack打包速度也是非常的慢，只是多页面项目更加明显而已，暂时没有好的解决方法，只能等webpack新版本解决<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><a href="https://segmentfault.com/a/1190000009916612" target="_blank" rel="noopener">重写webpack多页应用配置脚手架</a><br><a href="https://jeffjade.com/2017/08/06/124-webpack-packge-optimization-for-volume/" target="_blank" rel="noopener">Webpack 打包优化之体积篇</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尽管当下SPA横行，但是多页面项目依然有其存在的意义，webpack这件工具基本是为了SPA而专门准备的，网上看到很多利用webpack构建多页面的教程都是用gulp来配合使用的，在网上看大了一个思路只需对webpack简单配置一下就能实现大多数情景下的多页面项目。本文在vue-cli2.0的基础上做了对多页面vue项目的扩充。&lt;/p&gt;
&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;p&gt;首先webpack的思想是用js来构建项目的一切，即html只有一个外壳载体，项目的入口文件和执行文件为js，多页面项目肯定是多个入口文件。然后对不同的页面引入不同的入口文件。即：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置&lt;code&gt;weback.base.coonf.js&lt;/code&gt;中的&lt;code&gt;entry&lt;/code&gt;,从单一入口变为多入口配置项&lt;/li&gt;
&lt;li&gt;在dev和prod的配置项中利用&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;插件来对各个页面引入不同的入口js文件
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发问题总结（一）</title>
    <link href="http://lanbos.win/2018/07/09/FE/wechatHardPoints/"/>
    <id>http://lanbos.win/2018/07/09/FE/wechatHardPoints/</id>
    <published>2018-07-09T08:02:30.664Z</published>
    <updated>2018-07-09T08:02:30.664Z</updated>
    
    <content type="html"><![CDATA[<p>近期连续开发了几个微信公众号的项目并且和甲方配合很难，趟坑无数。罗列如下：</p>
<h2 id="前端技术栈选择（非技术同学可以忽略不看）"><a href="#前端技术栈选择（非技术同学可以忽略不看）" class="headerlink" title="前端技术栈选择（非技术同学可以忽略不看）"></a>前端技术栈选择（非技术同学可以忽略不看）</h2><p>没有使用单纯的SPA开发方式，是多页面和单页面混合开发方式。<del>~<code>webpack</code>对于多页面项目并不友好</del>~，而且由于之前的项目使用了构建工具<code>fis3</code>，也对其比较了解，所以总体项目构建方式为fis3+vue+less的平滑过渡方案，并自己魔改了一个网上的脚手架，涉及到npm脚本直接写了简单的bash或者python，这套脚手架方案不推荐复用了,随后会弄一个<code>webpack</code>多页面的解决方案，但总体思想是模块化和组件化，js模块、vue组件和less文件还是可以在今后的项目中复用。脚手架地址如下：<br><code>https://gitee.com/lanbos_document/vue_fis3_ts_less/tree/vuex/</code><br>vue的ui框架使用了<a href="https://didi.github.io/cube-ui/#/zh-CN/docs/introduction" target="_blank" rel="noopener">cube-ui</a>（滴滴的ui组件库）</p>
<blockquote>
<p>注：最新项目使用了webpack完成了对多页面项目的搭建<br><a id="more"></a></p>
<h2 id="vue-better-scroll（非技术同学可以忽略不看）"><a href="#vue-better-scroll（非技术同学可以忽略不看）" class="headerlink" title="vue+better-scroll（非技术同学可以忽略不看）"></a>vue+better-scroll（非技术同学可以忽略不看）</h2><p>为保证更好的滑动体验，使用了cube-ui scroll模块。首先需要引入对应的样式文件，并且</p>
<ol>
<li>需要给父级一个很大的固定高度（window.innerHeight）</li>
<li>设置css：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cube-scroll-wrapper</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<h2 id="android手机当字体小于12px时会导致文字整体偏上-（设计同学敲黑板）"><a href="#android手机当字体小于12px时会导致文字整体偏上-（设计同学敲黑板）" class="headerlink" title="android手机当字体小于12px时会导致文字整体偏上 （设计同学敲黑板）"></a>android手机当字体小于12px时会导致文字整体偏上 （设计同学敲黑板）</h2><p>(<a href="http://imweb.io/topic/5848d0fc9be501ba17b10a94)：" target="_blank" rel="noopener">http://imweb.io/topic/5848d0fc9be501ba17b10a94)：</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>testtesttesttesttest<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123; <span class="attribute">display</span>: table; &#125;<span class="selector-class">.content</span> &#123; <span class="attribute">background-color</span>: gray; <span class="attribute">font-size</span>: <span class="number">10px</span>; <span class="attribute">display</span>: table-cell; <span class="attribute">vertical-align</span>: middle; &#125;</span><br></pre></td></tr></table></figure>
<p>内嵌一层，并用table-cell来解决(不好使，测试了各种方式无法解决，<code>尽量不要使用12px以下的文字</code>)</p>
<h2 id="微信jssdk版本-（非技术同学可以忽略不看）"><a href="#微信jssdk版本-（非技术同学可以忽略不看）" class="headerlink" title="微信jssdk版本 （非技术同学可以忽略不看）"></a>微信jssdk版本 （非技术同学可以忽略不看）</h2><p>把jssdk更新到1.3.1版本，微信官方文档上的1.1版本很多功能不完善，并没有提供新版本的更新说明，尝试找到了1.3.1版本，更新后满足了很多Android上之前没有的功能。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//res.wx.qq.com/open/js/jweixin-1.3.1.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="解决IOS微信webview后退不执行JS的问题（非技术同学可以忽略不看）"><a href="#解决IOS微信webview后退不执行JS的问题（非技术同学可以忽略不看）" class="headerlink" title="解决IOS微信webview后退不执行JS的问题（非技术同学可以忽略不看）"></a>解决IOS微信webview后退不执行JS的问题（非技术同学可以忽略不看）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">//解决IOS微信webview后退不执行JS的问题</span></span><br><span class="line"><span class="built_in">window</span>.onpageshow = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.persisted) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>我们可以满足甲方提出的大多数动画效果，但是要明白复杂的动画需要使用逐帧动画技术，即需要设计同学做出动画的每一帧，我们使用css3动画技术进行播放。为保证动画流畅一秒大约为8~12帧，需要设计同学大量的工作，并且要与前端开发的配合调试。动画越复杂需要图片数量越多，会导致网页加载等待时间长，耗费用户大量流量等问题。</p>
<h2 id="声音和震动"><a href="#声音和震动" class="headerlink" title="声音和震动"></a>声音和震动</h2><p>除了动画，甲方提出了在页面中加入声音和震动的需求。但是这些会涉及到各种手机的兼容性问题。（1代表支持，0代表不支持）</p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">安卓机</th>
<th style="text-align:center">苹果机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">声音播放</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">震动</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">声音自动播放</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">声音叠加</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>(注意：iPhone上声音自动播放的问题可以借助微信jssdk在<code>wx.ready</code>的回调函数中实现)<br>iphone只支持一次播放一个声音，不允许同时播放多个声音。总之iphone上对多媒体交互限制性比较严格，</p>
<blockquote>
<p>具体有文献如下：<br><a href="https://www.ibm.com/developerworks/cn/web/wa-ioshtml5/index.html。" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/web/wa-ioshtml5/index.html。</a></p>
</blockquote>
<p>对此我们采用优雅兼容的方式，判断出用户的手机类型，对应使用不同的处理方式，只能尽量保证体验一致。</p>
<h2 id="x5内核对用户http协议的代理问题-无法获取Android用户位置问题"><a href="#x5内核对用户http协议的代理问题-无法获取Android用户位置问题" class="headerlink" title="x5内核对用户http协议的代理问题,无法获取Android用户位置问题"></a>x5内核对用户http协议的代理问题,无法获取Android用户位置问题</h2><p>当前越来越多的网站使用了更安全的<a href="https://www.chinassl.net/ssl_industry_news/n561.html" target="_blank" rel="noopener">https协议</a>，如果没有使用https协议的话微信（腾讯x5浏览器内核）会私自代理你的网络请求，导致无法获取用户位置等问题。（<a href="https://weibo.com/p/1001603863171138998679?mod=zwenzhang" target="_blank" rel="noopener">微信浏览器内核（QQ浏览器X5内核）在用户不知情情况下代理访问http页面</a>）。而且下一步微信可能会效仿苹果（也是国际上的趋势）必须要求在其内使用https协议，否则网页会被列为不安全网页，甚至不允许访问。</p>
<h2 id="设计时对文案长短和数字长短的考虑"><a href="#设计时对文案长短和数字长短的考虑" class="headerlink" title="设计时对文案长短和数字长短的考虑"></a>设计时对文案长短和数字长短的考虑</h2><p>这是前端和设计师长久以来一直面对的问题了，在开发和设计时要对大数字和很长的文案有预估。较长的文案有折行和用省略号表示的情况出现，要有心理预期。对于非常大的数字，随后会写个模块封装一下万，千万，和亿的显示（关于阿拉伯数字和中文数字表达是一个很有趣的算法题）。</p>
<h2 id="新型手机18：9比例的适配"><a href="#新型手机18：9比例的适配" class="headerlink" title="新型手机18：9比例的适配"></a>新型手机18：9比例的适配</h2><p>越来越多的手机使用18：9所谓的全面屏设计，导致在活动页面这种需要全屏铺满的页面中适配比较麻烦，当前使用了淘宝的<code>amfe-flexible</code>和构建阶段的插件<code>px2rem</code>.自动将px适配到相对单位rem，并能适应各种尺寸的设计图。具体如下：<br>自适应布局：<br>淘宝js包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm installl amfe-flexible</span><br><span class="line">npm install fis3-preprocessor-px2rem -g</span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fis-conf</span></span><br><span class="line">fis.match(<span class="string">'test.css'</span>, &#123;</span><br><span class="line">   preprocessor: fis.plugin(<span class="string">'px2rem'</span>,&#123;</span><br><span class="line">           designWidth: <span class="number">640</span></span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> flexible <span class="keyword">from</span> <span class="string">'amfe-flexible'</span>;</span><br></pre></td></tr></table></figure>
<p>webpack 中使用 <a href="https://www.npmjs.com/package/px2rem-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/px2rem-loader</a></p>
<h2 id="微信授权和分享相关的接口调试"><a href="#微信授权和分享相关的接口调试" class="headerlink" title="微信授权和分享相关的接口调试"></a>微信授权和分享相关的接口调试</h2><p>这方面需要后台支持，基本思路就是用中转页面，或者接口重定向到</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;近期连续开发了几个微信公众号的项目并且和甲方配合很难，趟坑无数。罗列如下：&lt;/p&gt;
&lt;h2 id=&quot;前端技术栈选择（非技术同学可以忽略不看）&quot;&gt;&lt;a href=&quot;#前端技术栈选择（非技术同学可以忽略不看）&quot; class=&quot;headerlink&quot; title=&quot;前端技术栈选择（非技术同学可以忽略不看）&quot;&gt;&lt;/a&gt;前端技术栈选择（非技术同学可以忽略不看）&lt;/h2&gt;&lt;p&gt;没有使用单纯的SPA开发方式，是多页面和单页面混合开发方式。&lt;del&gt;~&lt;code&gt;webpack&lt;/code&gt;对于多页面项目并不友好&lt;/del&gt;~，而且由于之前的项目使用了构建工具&lt;code&gt;fis3&lt;/code&gt;，也对其比较了解，所以总体项目构建方式为fis3+vue+less的平滑过渡方案，并自己魔改了一个网上的脚手架，涉及到npm脚本直接写了简单的bash或者python，这套脚手架方案不推荐复用了,随后会弄一个&lt;code&gt;webpack&lt;/code&gt;多页面的解决方案，但总体思想是模块化和组件化，js模块、vue组件和less文件还是可以在今后的项目中复用。脚手架地址如下：&lt;br&gt;&lt;code&gt;https://gitee.com/lanbos_document/vue_fis3_ts_less/tree/vuex/&lt;/code&gt;&lt;br&gt;vue的ui框架使用了&lt;a href=&quot;https://didi.github.io/cube-ui/#/zh-CN/docs/introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cube-ui&lt;/a&gt;（滴滴的ui组件库）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：最新项目使用了webpack完成了对多页面项目的搭建&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式学习（转自github）</title>
    <link href="http://lanbos.win/2018/07/09/FE/regex_base01/"/>
    <id>http://lanbos.win/2018/07/09/FE/regex_base01/</id>
    <published>2018-07-09T08:02:30.663Z</published>
    <updated>2018-07-09T08:02:30.663Z</updated>
    
    <content type="html"><![CDATA[<p>全文粘贴了<a href="https://github.com/zeeshanu/learn-regex/blob/master/README-cn.md" target="_blank" rel="noopener">learn-regex</a><br><br></p>
<p align="center"><br><img src="https://i.imgur.com/bYwl7Vf.png" alt="Learn Regex"><br></p><br><br><br><a id="more"></a><br>## 翻译:<br><br><em> <a href="README.md">English</a>
</em> <a href="README-es.md">Spanish</a><br><em> <a href="README-cn.md">中文版</a>
</em> <a href="README-ja.md">日本語</a><br><br>## 什么是正则表达式?<br><br>&gt; 正则表达式是一组由字母和符号组成的特殊文本, 它可以用来从文本中找出满足你想要的格式的句子.<br><br><br>一个正则表达式是在一个主体字符串中从左到右匹配字符串时的一种样式.<br>“Regular expression”这个词比较拗口, 我们常使用缩写的术语”regex”或”regexp”.<br>正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等.<br><br>想象你正在写一个应用, 然后你想设定一个用户命名的规则, 让用户名包含字符,数字,下划线和连字符,以及限制字符的个数,好让名字看起来没那么丑.<br>我们使用以下正则表达式来验证一个用户名:<br><br><br><br><br><p align="center"><br><img src="https://i.imgur.com/Pq5Llat.png" alt="Regular expression"><br></p>

<p>以上的正则表达式可以接受 <code>john_doe</code>, <code>jo-hn_doe</code>, <code>john12_as</code>.<br>但不匹配<code>Jo</code>, 因为它包含了大写的字母而且太短了.</p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li><a href="#1-基本匹配">1. 基本匹配</a></li>
<li><a href="#2-元字符">2. 元字符</a><ul>
<li><a href="#21-点运算符-">2.1 点运算符 .</a></li>
<li><a href="#22-字符集">2.2 字符集</a><ul>
<li><a href="#221-否定字符集">2.2.1 否定字符集</a><ul>
<li><a href="#23-重复次数">2.3 重复次数</a></li>
</ul>
</li>
<li><a href="#231--号">2.3.1 * 号</a></li>
<li><a href="#232--号">2.3.2   号</a></li>
<li><a href="#233--号">2.3.3 ? 号</a><ul>
<li><a href="#24--号">2.4 {} 号</a></li>
<li><a href="#25--特征标群">2.5 (…) 特征标群</a></li>
<li><a href="#26--或运算符">2.6 | 或运算符</a></li>
<li><a href="#27-转码特殊字符">2.7 转码特殊字符</a></li>
<li><a href="#28-锚点">2.8 锚点</a></li>
</ul>
</li>
<li><a href="#281--号">2.8.1 ^ 号</a></li>
<li><a href="#282--号">2.8.2 $ 号</a><ul>
<li><a href="#3-简写字符集">3. 简写字符集</a></li>
<li><a href="#4-前后关联约束前后预查">4. 前后关联约束(前后预查)</a></li>
<li><a href="#41--前置约束存在">4.1 ?=… 前置约束(存在)</a></li>
<li><a href="#42--前置约束-排除">4.2 ?!… 前置约束-排除</a></li>
<li><a href="#43---后置约束-存在">4.3 ?&lt;= … 后置约束-存在</a></li>
<li><a href="#44--后置约束-排除">4.4 ?&lt;!… 后置约束-排除</a></li>
<li><a href="#5-标志">5. 标志</a></li>
<li><a href="#51-忽略大小写-case-insensitive">5.1 忽略大小写 (Case Insensitive)</a></li>
<li><a href="#52-全局搜索-global-search">5.2 全局搜索 (Global search)</a></li>
<li><a href="#53-多行修饰符-multiline">5.3 多行修饰符 (Multiline)</a></li>
<li><a href="#额外补充">额外补充</a></li>
<li><a href="#贡献">贡献</a></li>
<li><a href="#许可证">许可证</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-基本匹配"><a href="#1-基本匹配" class="headerlink" title="1. 基本匹配"></a>1. 基本匹配</h2><p>正则表达式其实就是在执行搜索时的格式, 它由一些字母和数字组合而成.<br>例如: 一个正则表达式 <code>the</code>, 它表示一个规则: 由字母<code>t</code>开始,接着是<code>h</code>,再接着是<code>e</code>.</p>
<pre>
"the" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat. 
</pre>

<p><a href="https://regex101.com/r/dmRygT/1" target="_blank" rel="noopener">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>. 它逐个字符的与输入的正则表达式做比较.</p>
<p>正则表达式是大小写敏感的, 所以<code>The</code>不会匹配<code>the</code>.</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/1paXsy/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-元字符"><a href="#2-元字符" class="headerlink" title="2. 元字符"></a>2. 元字符</h2><p>正则表达式主要依赖于元字符.<br>元字符不代表他们本身的字面意思, 他们都有特殊的含义. 一些元字符写在方括号中的时候有一些特殊的意思. 以下是一些元字符的介绍:</p>
<table>
<thead>
<tr>
<th style="text-align:center">元字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>句号匹配任意单个字符除了换行符.</td>
</tr>
<tr>
<td style="text-align:center">[ ]</td>
<td>字符种类. 匹配方括号内的任意字符.</td>
</tr>
<tr>
<td style="text-align:center">[^ ]</td>
<td>否定的字符种类. 匹配除了方括号里的任意字符</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配&gt;=0个重复的在*号之前的字符.</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td>匹配&gt;=1个重复的+号前的字符.</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td>标记?之前的字符为可选.</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td>匹配num个中括号之前的字符 (n &lt;= num &lt;= m).</td>
</tr>
<tr>
<td style="text-align:center">(xyz)</td>
<td>字符集, 匹配与 xyz 完全相等的字符串.</td>
</tr>
<tr>
<td style="text-align:center">&#124;</td>
<td>或运算符,匹配符号前或后的字符.</td>
</tr>
<tr>
<td style="text-align:center">&#92;</td>
<td>转义字符,用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \ &#124;</code></td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td>从开始行开始匹配.</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td>从末端开始匹配.</td>
</tr>
</tbody>
</table>
<h2 id="2-1-点运算符"><a href="#2-1-点运算符" class="headerlink" title="2.1 点运算符 ."></a>2.1 点运算符 <code>.</code></h2><p><code>.</code>是元字符中最简单的例子.<br><code>.</code>匹配任意单个字符, 但不匹配换行符.<br>例如, 表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串.</p>
<pre>
".ar" => The <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/xc9GkU/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-2-字符集"><a href="#2-2-字符集" class="headerlink" title="2.2 字符集"></a>2.2 字符集</h2><p>字符集也叫做字符类.<br>方括号用来指定一个字符集.<br>在方括号中使用连字符来指定字符集的范围.<br>在方括号中的字符集不关心顺序.<br>例如, 表达式<code>[Tt]he</code> 匹配 <code>the</code> 和 <code>The</code>.</p>
<pre>
"[Tt]he" => <a href="#learn-regex"><strong>The</strong></a> car parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/2ITLQ4/1" target="_blank" rel="noopener">在线练习</a></p>
<p>方括号的句号就表示句号.<br>表达式 <code>ar[.]</code> 匹配 <code>ar.</code>字符串</p>
<pre>
"ar[.]" => A garage is a good place to park a c<a href="#learn-regex"><strong>ar.</strong></a>
</pre>

<p><a href="https://regex101.com/r/wL3xtE/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="2-2-1-否定字符集"><a href="#2-2-1-否定字符集" class="headerlink" title="2.2.1 否定字符集"></a>2.2.1 否定字符集</h3><p>一般来说 <code>^</code> 表示一个字符串的开头, 但它用在一个方括号的开头的时候, 它表示这个字符集是否定的.<br>例如, 表达式<code>[^c]ar</code> 匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符.</p>
<pre>
"[^c]ar" => The car <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/nNNlq3/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-3-重复次数"><a href="#2-3-重复次数" class="headerlink" title="2.3 重复次数"></a>2.3 重复次数</h2><p>后面跟着元字符 <code>+</code>, <code>*</code> or <code>?</code> 的, 用来指定匹配子模式的次数.<br>这些元字符在不同的情况下有着不同的意思.</p>
<h3 id="2-3-1-号"><a href="#2-3-1-号" class="headerlink" title="2.3.1 * 号"></a>2.3.1 <code>*</code> 号</h3><p><code>*</code>号匹配 在<code>*</code>之前的字符出现<code>大于等于0</code>次.<br>例如, 表达式 <code>a*</code> 匹配以0或更多个a开头的字符, 因为有0个这个条件, 其实也就匹配了所有的字符. 表达式<code>[a-z]*</code> 匹配一个行中所有以小写字母开头的字符串.</p>
<pre>
"[a-z]*" => T<a href="#learn-regex"><strong>he</strong></a> <a href="#learn-regex"><strong>car</strong></a> <a href="#learn-regex"><strong>parked</strong></a> <a href="#learn-regex"><strong>in</strong></a> <a href="#learn-regex"><strong>the</strong></a> <a href="#learn-regex"><strong>garage</strong></a> #21.
</pre>

<p><a href="https://regex101.com/r/7m8me5/1" target="_blank" rel="noopener">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>.<br><code>*</code>和表示匹配空格的符号<code>\s</code>连起来用, 如表达式<code>\s*cat\s*</code>匹配0或更多个空格开头和0或更多个空格结尾的cat字符串.</p>
<pre>
"\s*cat\s*" => The fat<a href="#learn-regex"><strong> cat </strong></a>sat on the <a href="#learn-regex">con<strong>cat</strong>enation</a>.
</pre>

<p><a href="https://regex101.com/r/gGrwuz/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="2-3-2-号"><a href="#2-3-2-号" class="headerlink" title="2.3.2 + 号"></a>2.3.2 <code>+</code> 号</h3><p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次个字符.<br>例如表达式<code>c.+t</code> 匹配以首字母<code>c</code>开头以<code>t</code>结尾,中间跟着任意个字符的字符串.</p>
<pre>
"c.+t" => The fat <a href="#learn-regex"><strong>cat sat on the mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/Dzf9Aa/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="2-3-3-号"><a href="#2-3-3-号" class="headerlink" title="2.3.3 ? 号"></a>2.3.3 <code>?</code> 号</h3><p>在正则表达式中元字符 <code>?</code> 标记在符号前面的字符为可选, 即出现 0 或 1 次.<br>例如, 表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>.</p>
<pre>
"[T]he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/cIg9zm/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"[T]?he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in t<a href="#learn-regex"><strong>he</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/kPpO2x/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-4-号"><a href="#2-4-号" class="headerlink" title="2.4 {} 号"></a>2.4 <code>{}</code> 号</h2><p>在正则表达式中 <code>{}</code> 是一个量词, 常用来一个或一组字符可以重复出现的次数.<br>例如,  表达式 <code>[0-9]{2,3}</code> 匹配 2～3 位 0～9 的数字.</p>
<pre>
"[0-9]{2,3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/juM86s/1" target="_blank" rel="noopener">在线练习</a></p>
<p>我们可以省略第二个参数.<br>例如, <code>[0-9]{2,}</code> 匹配至少两位 0~9 的数字.</p>
<p>如果逗号也省略掉则表示重复固定的次数.<br>例如, <code>[0-9]{3}</code> 匹配3位数字</p>
<pre>
"[0-9]{2,}" => The number was 9.<a href="#learn-regex"><strong>9997</strong></a> but we rounded it off to <a href="#learn-regex"><strong>10</strong></a>.0.
</pre>

<p><a href="https://regex101.com/r/Gdy4w5/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"[0-9]{3}" => The number was 9.<a href="#learn-regex"><strong>999</strong></a>7 but we rounded it off to 10.0.
</pre>

<p><a href="https://regex101.com/r/Sivu30/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-5-特征标群"><a href="#2-5-特征标群" class="headerlink" title="2.5 (...) 特征标群"></a>2.5 <code>(...)</code> 特征标群</h2><p>特征标群是一组写在 <code>(...)</code> 中的子模式. 例如之前说的 <code>{}</code> 是用来表示前面一个字符出现指定次数. 但如果在 <code>{}</code> 前加入特征标群则表示整个标群内的字符重复 N 次. 例如, 表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个 <code>ab</code>.</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code> 表示或. 例如, <code>(c|g|p)ar</code> 匹配 <code>car</code> 或 <code>gar</code> 或 <code>par</code>.</p>
<pre>
"(c|g|p)ar" => The <a href="#learn-regex"><strong>car</strong></a> is <a href="#learn-regex"><strong>par</strong></a>ked in the <a href="#learn-regex"><strong>gar</strong></a>age.
</pre>

<p><a href="https://regex101.com/r/tUxrBG/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-6-或运算符"><a href="#2-6-或运算符" class="headerlink" title="2.6 | 或运算符"></a>2.6 <code>|</code> 或运算符</h2><p>或运算符就表示或, 用作判断条件.</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或 <code>car</code>.</p>
<pre>
"(T|t)he|car" => <a href="#learn-regex"><strong>The</strong></a> <a href="#learn-regex"><strong>car</strong></a> is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/fBXyX0/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-7-转码特殊字符"><a href="#2-7-转码特殊字符" class="headerlink" title="2.7 转码特殊字符"></a>2.7 转码特殊字符</h2><p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符. 用于指定 <code>{ } [ ] / \ + * . $ ^ | ?</code> 这些特殊字符. 如果想要匹配这些特殊字符则要在其前面加上反斜线 <code>\</code>.</p>
<p>例如 <code>.</code> 是用来匹配除换行符外的所有字符的. 如果想要匹配句子中的 <code>.</code> 则要写成 <code>\.</code> 以下这个例子 <code>\.?</code>是选择性匹配<code>.</code></p>
<pre>
"(f|c|m)at\.?" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> sat on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/DOc5Nu/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="2-8-锚点"><a href="#2-8-锚点" class="headerlink" title="2.8 锚点"></a>2.8 锚点</h2><p>在正则表达式中, 想要匹配指定开头或结尾的字符串就要使用到锚点. <code>^</code> 指定开头, <code>$</code> 指定结尾.</p>
<h3 id="2-8-1-号"><a href="#2-8-1-号" class="headerlink" title="2.8.1 ^ 号"></a>2.8.1 <code>^</code> 号</h3><p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头.</p>
<p>例如, 在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果 <code>a</code>. 但如果使用 <code>^b</code> 将匹配不到任何结果. 因为在字符串 <code>abc</code> 中并不是以 <code>b</code> 开头.</p>
<p>例如, <code>^(T|t)he</code> 匹配以 <code>The</code> 或 <code>the</code> 开头的字符串.</p>
<pre>
"(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in <a href="#learn-regex"><strong>the</strong></a> garage.
</pre>

<p><a href="https://regex101.com/r/5ljjgB/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"^(T|t)he" => <a href="#learn-regex"><strong>The</strong></a> car is parked in the garage.
</pre>

<p><a href="https://regex101.com/r/jXrKne/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="2-8-2-号"><a href="#2-8-2-号" class="headerlink" title="2.8.2 $ 号"></a>2.8.2 <code>$</code> 号</h3><p>同理于 <code>^</code> 号, <code>$</code> 号用来匹配字符是否是最后一个.</p>
<p>例如, <code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串.</p>
<pre>
"(at\.)" => The fat c<a href="#learn-regex"><strong>at.</strong></a> s<a href="#learn-regex"><strong>at.</strong></a> on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/y4Au4D/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"(at\.)$" => The fat cat. sat. on the m<a href="#learn-regex"><strong>at.</strong></a>
</pre>

<p><a href="https://regex101.com/r/t0AkOd/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="3-简写字符集"><a href="#3-简写字符集" class="headerlink" title="3. 简写字符集"></a>3. 简写字符集</h2><p>正则表达式提供一些常用的字符集简写. 如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">简写</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">.</td>
<td>除换行符外的所有字符</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td>匹配所有字母数字, 等同于 <code>[a-zA-Z0-9_]</code></td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td>匹配所有非字母数字, 即符号, 等同于: <code>[^\w]</code></td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td>匹配数字: <code>[0-9]</code></td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td>匹配非数字: <code>[^\d]</code></td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td>匹配所有空格字符, 等同于: <code>[\t\n\f\r\p{Z}]</code></td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td>匹配所有非空格字符: <code>[^\s]</code></td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td>匹配一个换页符</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td>匹配一个换行符</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td>匹配一个回车符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td>匹配一个制表符</td>
</tr>
<tr>
<td style="text-align:center">\v</td>
<td>匹配一个垂直制表符</td>
</tr>
<tr>
<td style="text-align:center">\p</td>
<td>匹配 CR/LF (等同于 <code>\r\n</code>)，用来匹配 DOS 行终止符</td>
</tr>
</tbody>
</table>
<h2 id="4-前后关联约束-前后预查"><a href="#4-前后关联约束-前后预查" class="headerlink" title="4. 前后关联约束(前后预查)"></a>4. 前后关联约束(前后预查)</h2><p>前置约束和后置约束都属于<strong>非捕获簇</strong>(用于匹配不在匹配列表中的格式).<br>前置约束用于判断所匹配的格式是否在另一个确定的格式之后.</p>
<p>例如, 我们想要获得所有跟在 <code>$</code> 符号后的数字, 我们可以使用正向向后约束 <code>(?&lt;=\$)[0-9\.]*</code>.<br>这个表达式匹配 <code>$</code> 开头, 之后跟着 <code>0,1,2,3,4,5,6,7,8,9,.</code> 这些字符可以出现大于等于 0 次.</p>
<p>前后关联约束如下:</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?=</td>
<td>前置约束-存在</td>
</tr>
<tr>
<td style="text-align:center">?!</td>
<td>前置约束-排除</td>
</tr>
<tr>
<td style="text-align:center">?&lt;=</td>
<td>后置约束-存在</td>
</tr>
<tr>
<td style="text-align:center">?&lt;!</td>
<td>后置约束-排除</td>
</tr>
</tbody>
</table>
<h3 id="4-1-前置约束-存在"><a href="#4-1-前置约束-存在" class="headerlink" title="4.1 ?=... 前置约束(存在)"></a>4.1 <code>?=...</code> 前置约束(存在)</h3><p><code>?=...</code> 前置约束(存在), 表示第一部分表达式必须跟在 <code>?=...</code>定义的表达式之后.</p>
<p>返回结果只瞒住第一部分表达式.<br>定义一个前置约束(存在)要使用 <code>()</code>. 在括号内部使用一个问号和等号: <code>(?=...)</code>. </p>
<p>前置约束的内容写在括号中的等号后面.<br>例如, 表达式 <code>[T|t]he(?=\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 在括号中我们又定义了前置约束(存在) <code>(?=\sfat)</code> ,即 <code>The</code> 和 <code>the</code> 后面紧跟着 <code>(空格)fat</code>.</p>
<pre>
"[T|t]he(?=\sfat)" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/IDDARt/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="4-2-前置约束-排除"><a href="#4-2-前置约束-排除" class="headerlink" title="4.2 ?!... 前置约束-排除"></a>4.2 <code>?!...</code> 前置约束-排除</h3><p>前置约束-排除 <code>?!</code> 用于筛选所有匹配结果, 筛选条件为 其后不跟随着定义的格式<br><code>前置约束-排除</code>  定义和 <code>前置约束(存在)</code> 一样, 区别就是 <code>=</code> 替换成 <code>!</code> 也就是 <code>(?!...)</code>. </p>
<p>表达式 <code>[T|t]he(?!\sfat)</code> 匹配 <code>The</code> 和 <code>the</code>, 且其后不跟着 <code>(空格)fat</code>.</p>
<pre>
"[T|t]he(?!\sfat)" => The fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/V32Npg/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="4-3-lt-后置约束-存在"><a href="#4-3-lt-后置约束-存在" class="headerlink" title="4.3 ?&lt;= ... 后置约束-存在"></a>4.3 <code>?&lt;= ...</code> 后置约束-存在</h3><p>后置约束-存在 记作<code>(?&lt;=...)</code> 用于筛选所有匹配结果, 筛选条件为 其前跟随着定义的格式.<br>例如, 表达式 <code>(?&lt;=[T|t]he\s)(fat|mat)</code> 匹配 <code>fat</code> 和 <code>mat</code>, 且其前跟着 <code>The</code> 或 <code>the</code>.</p>
<pre>
"(?<=[t|t]he\s)(fat|mat)" ==""> The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the <a href="#learn-regex"><strong>mat</strong></a>.
</=[t|t]he\s)(fat|mat)"></pre>

<p><a href="https://regex101.com/r/avH165/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="4-4-lt-后置约束-排除"><a href="#4-4-lt-后置约束-排除" class="headerlink" title="4.4 ?&lt;!... 后置约束-排除"></a>4.4 <code>?&lt;!...</code> 后置约束-排除</h3><p>后置约束-排除 记作 <code>(?&lt;!...)</code> 用于筛选所有匹配结果, 筛选条件为 其前不跟着定义的格式.<br>例如, 表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配 <code>cat</code>, 且其前不跟着 <code>The</code> 或 <code>the</code>.</p>
<pre>
"(?&lt;![T|t]he\s)(cat)" => The cat sat on <a href="#learn-regex"><strong>cat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/8Efx5G/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="5-标志"><a href="#5-标志" class="headerlink" title="5. 标志"></a>5. 标志</h2><p>标志也叫修饰语, 因为它可以用来修改表达式的搜索结果.<br>这些标志可以任意的组合使用, 它也是整个正则表达式的一部分.</p>
<table>
<thead>
<tr>
<th style="text-align:center">标志</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">i</td>
<td>忽略大小写.</td>
</tr>
<tr>
<td style="text-align:center">g</td>
<td>全局搜索.</td>
</tr>
<tr>
<td style="text-align:center">m</td>
<td>多行的: 锚点元字符 <code>^</code> <code>$</code> 工作范围在每行的起始.</td>
</tr>
</tbody>
</table>
<h3 id="5-1-忽略大小写-Case-Insensitive"><a href="#5-1-忽略大小写-Case-Insensitive" class="headerlink" title="5.1 忽略大小写 (Case Insensitive)"></a>5.1 忽略大小写 (Case Insensitive)</h3><p>修饰语 <code>i</code> 用于忽略大小写.<br>例如, 表达式 <code>/The/gi</code> 表示在全局搜索 <code>The</code>, 在后面的 <code>i</code> 将其条件修改为忽略大小写, 则变成搜索 <code>the</code> 和 <code>The</code>, <code>g</code> 表示全局搜索.</p>
<pre>
"The" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/dpQyf9/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"/The/gi" => <a href="#learn-regex"><strong>The</strong></a> fat cat sat on <a href="#learn-regex"><strong>the</strong></a> mat.
</pre>

<p><a href="https://regex101.com/r/ahfiuh/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="5-2-全局搜索-Global-search"><a href="#5-2-全局搜索-Global-search" class="headerlink" title="5.2 全局搜索 (Global search)"></a>5.2 全局搜索 (Global search)</h3><p>修饰符 <code>g</code> 常用语执行一个全局搜索匹配, 即(不仅仅返回第一个匹配的, 而是返回全部).<br>例如, 表达式 <code>/.(at)/g</code> 表示搜索 任意字符(除了换行) + <code>at</code>, 并返回全部结果.</p>
<pre>
"/.(at)/" => The <a href="#learn-regex"><strong>fat</strong></a> cat sat on the mat.
</pre>

<p><a href="https://regex101.com/r/jnk6gM/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"/.(at)/g" => The <a href="#learn-regex"><strong>fat</strong></a> <a href="#learn-regex"><strong>cat</strong></a> <a href="#learn-regex"><strong>sat</strong></a> on the <a href="#learn-regex"><strong>mat</strong></a>.
</pre>

<p><a href="https://regex101.com/r/dO1nef/1" target="_blank" rel="noopener">在线练习</a></p>
<h3 id="5-3-多行修饰符-Multiline"><a href="#5-3-多行修饰符-Multiline" class="headerlink" title="5.3 多行修饰符 (Multiline)"></a>5.3 多行修饰符 (Multiline)</h3><p>多行修饰符 <code>m</code> 常用语执行一个多行匹配. </p>
<p>像之前介绍的 <code>(^,$)</code> 用于检查格式是否是在待检测字符串的开头或结尾. 但我们如果想要它在每行的开头和结尾生效, 我们需要用到多行修饰符 <code>m</code>.</p>
<p>例如, 表达式 <code>/at(.)?$/gm</code> 表示在待检测字符串每行的末尾搜索 <code>at</code>后跟一个或多个 <code>.</code> 的字符串, 并返回全部结果.</p>
<pre>
"/.at(.)?$/" => The fat
                cat sat
                on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/hoGMkP/1" target="_blank" rel="noopener">在线练习</a></p>
<pre>
"/.at(.)?$/gm" => The <a href="#learn-regex"><strong>fat</strong></a>
                  cat <a href="#learn-regex"><strong>sat</strong></a>
                  on the <a href="#learn-regex"><strong>mat.</strong></a>
</pre>

<p><a href="https://regex101.com/r/E88WE2/1" target="_blank" rel="noopener">在线练习</a></p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>报告问题</li>
<li>开放合并请求</li>
<li>传播此文档</li>
<li>直接和我联系 ziishaned@gmail.com 或 <a href="https://twitter.com/ziishaned" target="_blank" rel="noopener"><img src="https://img.shields.io/twitter/url/https/twitter.com/ziishaned.svg?style=social&amp;label=Follow%20%40ziishaned" alt="Twitter URL"></a></li>
</ul>
<h2 id="许可证"><a href="#许可证" class="headerlink" title="许可证"></a>许可证</h2><p>MIT © <a href="mailto:ziishaned@gmail.com" target="_blank" rel="noopener">Zeeshan Ahmed</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全文粘贴了&lt;a href=&quot;https://github.com/zeeshanu/learn-regex/blob/master/README-cn.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;learn-regex&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/bYwl7Vf.png&quot; alt=&quot;Learn Regex&quot;&gt;&lt;br&gt;&lt;/p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js的mvvm（1）</title>
    <link href="http://lanbos.win/2018/07/09/FE/vue_base01/"/>
    <id>http://lanbos.win/2018/07/09/FE/vue_base01/</id>
    <published>2018-07-09T08:02:30.663Z</published>
    <updated>2018-07-09T08:02:30.663Z</updated>
    
    <content type="html"><![CDATA[<p>通过vue框架的简单学习来了解js的mvvm思想。</p>
<h2 id="mvvm雏形"><a href="#mvvm雏形" class="headerlink" title="mvvm雏形"></a>mvvm雏形</h2><p>都在说jq的黄金时代已过，但是jq在当前很多项目中也仍在发挥着重要的作用。个人觉得jq+模板引擎+各种插件的开发模式是当下非常流行的mvvm的雏形。<br>各种模板引擎充当view的角色，同样使用js的对象充当model，同样通过修改赋值给模板引擎的数据来实现view层的改变。（模板引擎的使用不在这里赘述，详情参见<a href="https://github.com/aui/artTemplate#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B" target="_blank" rel="noopener">《新一代 javascript 模板引擎:artTemplate-3.0》</a>）<br>这套方法可以基本实现mvvm中的单向数据绑定（双向数据绑定择需要配合jq的事件监听，或<a href="https://www.zhihu.com/question/23275373" target="_blank" rel="noopener">其他复杂方法</a>），jq在其中起到的作用只是简单的dom节点获取，然后把模板生成的html格式字符串再输出到指定位置，这种简单的dom操作甚至完全可以通过原生的js代替。而jq的插件多用来在view层进行更改，若是要配合数据输出的话只需简单的在html中套用模板引擎并稍加修改就可以。在小型项目，页面较少、表单较少、非SPA等情况下，这种开发方式具有高度的灵活性和便利性，学习成本非常低。当然随着前端代码的复杂性不断提升，ajax数据交互的更频繁，SPA更加流行等趋势，一套完整的、体系化的mvvm框架能帮助开发者更快，更舒适的开发。mvvm框架有很多，最知名的angular和react的大战持续了一段时间，但是angular2.0的断层兼容与react的jsx语法都有颠覆式的学习成本，国内大神的vue在2016年渐渐的积攒人气正在迎头赶上，而且和之前所说的jq+模板引擎的雏形开发方式相像处不少，通过对vue的学习可以较为系统的理解js的mvvm。<br><a id="more"></a></p>
<h2 id="vue的安装"><a href="#vue的安装" class="headerlink" title="vue的安装"></a>vue的安装</h2><p>安装Vue有很多方法，可以用npm或者webpack。但是我们现在的目标是尽快用起来，所以最简单的方法是直接在HTML代码中像引用jQuery一样引用Vue。可以直接使用CDN的地址，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue@2.0.1/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>vue和随后路由组件（vue-router），ajax请求组件（vue-resource），表单验证组件（vue-validator）等最好由自动化工具webpack来配合使用，自动化工具选择的灵活性是mvvm框架与jq+模板引擎无法比拟的地方，当然强大的webpack对组件式开发带来的便利性也是非常有利的。</p>
<h2 id="vue的单向数据绑定"><a href="#vue的单向数据绑定" class="headerlink" title="vue的单向数据绑定"></a>vue的单向数据绑定</h2><p>用js的对象实现一个model：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  name:<span class="string">'Robot'</span>,</span><br><span class="line">  age: <span class="number">15</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而view层的dom节点用类似于模板引擎的<em>{ {name} }</em>和 <em>{ {age} }</em>来引用model的属性：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are &#123;&#123; age &#125;&#125; years old!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后一步是用Vue把两者关联起来。<em>要特别注意的是</em>，在<em>&lt; head &gt;</em>内部编写的JavaScript代码，需要用jQuery把MVVM的初始化代码推迟到页面加载完毕后执行，否则，直接在<em>&lt; head &gt;</em>内执行MVVM代码时，DOM节点尚未被浏览器加载，初始化将失败。正确的写法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引用Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 初始化代码:</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#vm'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">'Robot'</span>,</span></span><br><span class="line"><span class="undefined">            age: 15</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.vm = vm;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>You are &#123;&#123; age &#125;&#125; years old!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们创建一个VM的核心代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vm'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: <span class="string">'Robot'</span>,</span><br><span class="line">        age: <span class="number">15</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>其中，el指定了要把Model绑定到哪个DOM根节点上，语法和jQuery类似。这里的<em>‘#vm’</em>对应ID为<em>vm</em>的一个<em><div></div></em>节点：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>该节点以及该节点内部，就是vue可以操作的view。Vue可以自动把Model的状态映射到View上，但是不能操作View范围之外的其他DOM节点。实际操作过程中若是页面不复杂可以类似于<em>angular</em>一样直接把body整个选中当做可操作的view。然后，<em>data</em>属性指定了Model，我们初始化了Model的两个属性<em>name</em>和<em>age</em>，在View内部的<em>&lt; p &gt;</em>节点上，可以直接用<em> name </em>引用Model的某个属性。<br>用浏览器打开html，显示<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Robot!</span><br><span class="line">You are 15 years old!</span><br></pre></td></tr></table></figure></p>
<p>然后可以直接用js代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.vm.name = <span class="string">'Bob'</span></span><br></pre></td></tr></table></figure></p>
<p>来进行单向数据绑定操作，页面输出为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello, Bob!</span><br><span class="line">You are 15 years old!</span><br></pre></td></tr></table></figure></p>
<p>原来的Hello, Robot!自动变成了Hello, Bob!。Vue作为MVVM框架会自动监听Model的任何变化，在Model数据变化时，更新View的显示。这种Model到View的绑定我们称为单向绑定。<br>在Vue中，可以直接写 name 绑定某个属性。如果属性关联的是对象，还可以用多个.引用，例如，<em>{ { address.zipcode } }</em>。另一种单向绑定的方法是使用Vue的指令v-text，写法如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这种写法是把指令写在HTML节点的属性上，它会被Vue解析，该节点的文本内容会被绑定为Model的指定属性，注意不能再写双花括号。</p>
<h2 id="vue的双向数据绑定"><a href="#vue的双向数据绑定" class="headerlink" title="vue的双向数据绑定"></a>vue的双向数据绑定</h2><blockquote>
<p>单向绑定非常简单，就是把Model绑定到View，当我们用JavaScript代码更新Model时，View就会自动更新。<br>有单向绑定，就有双向绑定。如果用户更新了View，Model的数据也自动被更新了，这种情况就是双向绑定。<br>什么情况下用户可以更新View呢？填写表单就是一个最直接的例子。当用户填写表单时，View的状态就被更新了，如果此时MVVM框架可以自动更新Model的状态，那就相当于我们把Model和View做了双向绑定，在浏览器中，当用户修改了表单的内容时，我们绑定的Model会自动更新。</p>
</blockquote>
<p>在Vue中，使用双向绑定非常容易，我们仍然先创建一个VM实例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">       el: <span class="string">'#vm'</span>,</span><br><span class="line">       data: &#123;</span><br><span class="line">           email: <span class="string">''</span>,</span><br><span class="line">           name: <span class="string">''</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="built_in">window</span>.vm = vm;</span><br></pre></td></tr></table></figure></p>
<p>然后，编写一个HTML FORM表单，并用v-model指令把某个&lt; input &gt;和Model的某个属性作双向绑定：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"vm"</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们可以在表单中输入内容，然后在浏览器console中用window.vm.$data查看Model的内容，也可以用window.vm.name查看Model的name属性，它的值和FORM表单对应的&lt; input &gt;是一致的。<br>如果在浏览器console中用JavaScript更新Model，例如，执行window.vm.name=’Bob’，表单对应的&lt; input &gt;内容就会立刻更新。</p>
<p>参照：<a href="http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">廖雪峰的官方网站javascript教程部分</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过vue框架的简单学习来了解js的mvvm思想。&lt;/p&gt;
&lt;h2 id=&quot;mvvm雏形&quot;&gt;&lt;a href=&quot;#mvvm雏形&quot; class=&quot;headerlink&quot; title=&quot;mvvm雏形&quot;&gt;&lt;/a&gt;mvvm雏形&lt;/h2&gt;&lt;p&gt;都在说jq的黄金时代已过，但是jq在当前很多项目中也仍在发挥着重要的作用。个人觉得jq+模板引擎+各种插件的开发模式是当下非常流行的mvvm的雏形。&lt;br&gt;各种模板引擎充当view的角色，同样使用js的对象充当model，同样通过修改赋值给模板引擎的数据来实现view层的改变。（模板引擎的使用不在这里赘述，详情参见&lt;a href=&quot;https://github.com/aui/artTemplate#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《新一代 javascript 模板引擎:artTemplate-3.0》&lt;/a&gt;）&lt;br&gt;这套方法可以基本实现mvvm中的单向数据绑定（双向数据绑定择需要配合jq的事件监听，或&lt;a href=&quot;https://www.zhihu.com/question/23275373&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;其他复杂方法&lt;/a&gt;），jq在其中起到的作用只是简单的dom节点获取，然后把模板生成的html格式字符串再输出到指定位置，这种简单的dom操作甚至完全可以通过原生的js代替。而jq的插件多用来在view层进行更改，若是要配合数据输出的话只需简单的在html中套用模板引擎并稍加修改就可以。在小型项目，页面较少、表单较少、非SPA等情况下，这种开发方式具有高度的灵活性和便利性，学习成本非常低。当然随着前端代码的复杂性不断提升，ajax数据交互的更频繁，SPA更加流行等趋势，一套完整的、体系化的mvvm框架能帮助开发者更快，更舒适的开发。mvvm框架有很多，最知名的angular和react的大战持续了一段时间，但是angular2.0的断层兼容与react的jsx语法都有颠覆式的学习成本，国内大神的vue在2016年渐渐的积攒人气正在迎头赶上，而且和之前所说的jq+模板引擎的雏形开发方式相像处不少，通过对vue的学习可以较为系统的理解js的mvvm。&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="vue" scheme="http://lanbos.win/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>js的mvvm（2）</title>
    <link href="http://lanbos.win/2018/07/09/FE/vue_base02/"/>
    <id>http://lanbos.win/2018/07/09/FE/vue_base02/</id>
    <published>2018-07-09T08:02:30.663Z</published>
    <updated>2018-07-09T08:02:30.663Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue处理事件"><a href="#vue处理事件" class="headerlink" title="vue处理事件"></a>vue处理事件</h2><p>当用户提交表单时，传统的做法是响应onsubmit事件，用jQuery获取表单内容，检查输入是否有效，最后提交表单，或者用AJAX提交表单。<br>现在，获取表单内容已经不需要了，因为双向绑定直接让我们获得了表单内容，并且获得了合适的数据类型。<br>响应onsubmit事件也可以放到VM中。我们在&lt; form &gt;元素上使用指令：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"vm"</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"register"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其中，v-on:sumbit=”register”指令就会自动监听表单的submit事件，并调用register方法处理该事件。使用.prevent表示阻止事件冒泡，这样，浏览器不再处理FORM的submit事件。<br>因为我们指定了事件处理函数是register，所以需要在创建VM时添加一个register函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vm'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        register: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 显示JSON格式的Model:</span></span><br><span class="line">            alert(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.$data));</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> AJAX POST...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>点击事件、鼠标经过事件等与其都类似。<br><a id="more"></a></p>
<h2 id="模板循环判断等"><a href="#模板循环判断等" class="headerlink" title="模板循环判断等"></a>模板循环判断等</h2><p>模板最重要和最常用的功能就是条件渲染和循环渲染列表，mvvm框架的view层也都提供了类似的用法：</p>
<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>与常见的字符串模板不同，mvvm框架的条件循环是借助元素的指令完成的，所以通常会借助一个空标签template来完成，最终的渲染结果不包含此空标签：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#vm'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        ok: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="列表循环渲染"><a href="#列表循环渲染" class="headerlink" title="列表循环渲染"></a>列表循环渲染</h3><p>列表循环的方式和条件循环类似，最好通过空标签template进行渲染：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"vm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#vm'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="undefined">        items: [</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">msg</span>: <span class="string">'Foo'</span> &#125;,</span></span><br><span class="line"><span class="javascript">      &#123; <span class="attr">msg</span>: <span class="string">'Bar'</span> &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当然也可以直接把指令挂在需要循环的元素上，循环渲染。需要注意的是，Vue之所以能够监听Model状态的变化，是因为JavaScript语言本身提供了Proxy或者Object.observe()机制来监听对象状态的变化。但是，对于数组元素的赋值，却没有办法直接监听，因此，如果我们直接对数组元素赋值：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.items[<span class="number">0</span>] = &#123;</span><br><span class="line">    msg: <span class="string">'New name'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>会导致Vue无法更新View。<br>正确的方法是不要对数组元素赋值，而是更新：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items[<span class="number">0</span>].msg=<span class="string">'New name'</span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="vue插件的简单介绍"><a href="#vue插件的简单介绍" class="headerlink" title="vue插件的简单介绍"></a>vue插件的简单介绍</h2><h3 id="vue-resource-ajax请求插件"><a href="#vue-resource-ajax请求插件" class="headerlink" title="vue-resource ajax请求插件"></a>vue-resource ajax请求插件</h3><p>可以直接通过script标签引入，或者其他自动化工具。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/vue.resource/1.0.3/vue-resource.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>我们给VM增加一个init()方法，读取后台发送的列表：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#vm'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        title: <span class="string">'TODO List'</span>,</span><br><span class="line">        todos: []</span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            that.$http.get(<span class="string">'/api/todos'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 调用API成功时调用json()异步返回结果:</span></span><br><span class="line">                resp.json().then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 更新VM的todos:</span></span><br><span class="line">                    that.todos = result.todos;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// 调用API失败:</span></span><br><span class="line">                alert(<span class="string">'error'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>jsonp示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$http.jsonp(jsonpUrl,&#123;<span class="attr">jsonpCallback</span>:jsonpName&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">rep</span>)</span>&#123;</span><br><span class="line">  rep=rep.body;</span><br><span class="line">  <span class="built_in">console</span>.log(rep);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>注意到创建VM时，created指定了当VM初始化成功后的回调函数，这样，init()方法会被自动调用。<br>类似的，对于添加、修改、删除的操作，我们也需要往VM中添加对应的函数。以添加为例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    ...</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...</span><br><span class="line">        create: <span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            that.$resource(<span class="string">'/api/todos'</span>).save(todo).then(<span class="function"><span class="keyword">function</span> (<span class="params">resp</span>) </span>&#123;</span><br><span class="line">                resp.json().then(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    that.todos.push(result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, showError);</span><br><span class="line">        &#125;,</span><br><span class="line">        update: <span class="function"><span class="keyword">function</span> (<span class="params">todo, prop, e</span>) </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span> (<span class="params">todo</span>) </span>&#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="vue-router-2"><a href="#vue-router-2" class="headerlink" title="vue-router 2"></a>vue-router 2</h3><p>前后分离的开发方式把很多后端逻辑放到了前端来进行实现，spa单页面网站的流行，更是将路由和部分其他中间件交给了前端来实现，mvvm框架的流行很大一部分也是基于spa的兴起。vue拥有官方路由插件vue-router，用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js 时，我们就已经把组件组合成一个应用了，当你要把 vue-router 加进来，只需要配置组件和路由映射，然后告诉 vue-router 在哪里渲染它们。下面是个基本例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue-router/2.0.0/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 0. 如果使用模块化机制编程， 要调用 Vue.use(VueRouter)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义（路由）组件。</span></span><br><span class="line"><span class="comment">// 可以从其他文件 import 进来</span></span><br><span class="line"><span class="keyword">var</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</span><br><span class="line"><span class="keyword">var</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 定义路由</span></span><br><span class="line"><span class="comment">// 每个路由应该映射一个组件。 其中"component" 可以是</span></span><br><span class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></span><br><span class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></span><br><span class="line"><span class="comment">// 我们晚点在讨论嵌套路由。</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></span><br><span class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 创建和挂载根实例。</span></span><br><span class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></span><br><span class="line"><span class="comment">// 从而让整个应用都有路由功能</span></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在，应用已经启动了！</span></span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>从几个例子我们可以看到，MVVM最大的优势是编写前端逻辑非常复杂的页面，尤其是需要大量DOM操作的逻辑，利用MVVM可以极大地简化前端页面的逻辑。<br>但是MVVM不是万能的，它的目的是为了解决复杂的前端逻辑。对于以展示逻辑为主的页面，例如，新闻，博客、文档等，不能使用MVVM展示数据，因为这些页面需要被搜索引擎索引，而搜索引擎无法获取使用MVVM并通过API加载的数据。<br>所以，需要SEO（Search Engine Optimization）的页面，不能使用MVVM展示数据。不需要SEO的页面，如果前端逻辑复杂，就适合使用MVVM展示数据，例如，工具类页面，复杂的表单页面，用户登录后才能操作的页面等等。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vue处理事件&quot;&gt;&lt;a href=&quot;#vue处理事件&quot; class=&quot;headerlink&quot; title=&quot;vue处理事件&quot;&gt;&lt;/a&gt;vue处理事件&lt;/h2&gt;&lt;p&gt;当用户提交表单时，传统的做法是响应onsubmit事件，用jQuery获取表单内容，检查输入是否有效，最后提交表单，或者用AJAX提交表单。&lt;br&gt;现在，获取表单内容已经不需要了，因为双向绑定直接让我们获得了表单内容，并且获得了合适的数据类型。&lt;br&gt;响应onsubmit事件也可以放到VM中。我们在&amp;lt; form &amp;gt;元素上使用指令：&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;vm&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;v-on:submit.prevent&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;register&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;其中，v-on:sumbit=”register”指令就会自动监听表单的submit事件，并调用register方法处理该事件。使用.prevent表示阻止事件冒泡，这样，浏览器不再处理FORM的submit事件。&lt;br&gt;因为我们指定了事件处理函数是register，所以需要在创建VM时添加一个register函数：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vm = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    el: &lt;span class=&quot;string&quot;&gt;&#39;#vm&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    methods: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        register: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 显示JSON格式的Model:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            alert(&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.$data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// &lt;span class=&quot;doctag&quot;&gt;TODO:&lt;/span&gt; AJAX POST...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击事件、鼠标经过事件等与其都类似。&lt;br&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="vue" scheme="http://lanbos.win/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Fullscreen API：全屏操作</title>
    <link href="http://lanbos.win/2018/07/09/FE/fullscreenjs/"/>
    <id>http://lanbos.win/2018/07/09/FE/fullscreenjs/</id>
    <published>2018-07-09T08:02:30.662Z</published>
    <updated>2018-07-09T08:02:30.662Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="http://www.cnblogs.com/hustskyking/p/javascript-fullscreen.html#2885642" target="_blank" rel="noopener">《让你的页面全屏》</a></p>
<hr>
<p>进入全屏方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要传入dom对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launchFullscreen</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(element.requestFullscreen) &#123;</span><br><span class="line">    element.requestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.mozRequestFullScreen) &#123;</span><br><span class="line">    element.mozRequestFullScreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.msRequestFullscreen)&#123;</span><br><span class="line">    element.msRequestFullscreen();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element.webkitRequestFullscreen) &#123;</span><br><span class="line">    element.webkitRequestFullScreen();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>全屏状态改变监听：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">'webkitfullscreenchange mozfullscreenchange fullscreenchange'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">document</span>.fullscreenElement &amp;&amp; <span class="comment">// alternative standard method</span></span><br><span class="line">    !<span class="built_in">document</span>.mozFullScreenElement &amp;&amp;</span><br><span class="line">    !<span class="built_in">document</span>.webkitFullscreenElement &amp;&amp;</span><br><span class="line">    !<span class="built_in">document</span>.msFullscreenElement) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'退出全屏'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'进入全屏'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考自&lt;a href=&quot;http://www.cnblogs.com/hustskyking/p/javascript-fullscreen.html#2885642&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《让你的页面全屏》&lt;/a&gt;&lt;/p&gt;
&lt;hr
    
    </summary>
    
      <category term="snippets" scheme="http://lanbos.win/categories/snippets/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js字符串操作</title>
    <link href="http://lanbos.win/2018/07/09/FE/js_stringHandle/"/>
    <id>http://lanbos.win/2018/07/09/FE/js_stringHandle/</id>
    <published>2018-07-09T08:02:30.662Z</published>
    <updated>2018-07-09T08:02:30.662Z</updated>
    
    <content type="html"><![CDATA[<p>一直想总结一篇js的字符串操作文档，之前有过笔记，但是都比较零散，而且<code>es6</code>的出现让操作字符串出现了一些新的方式，今天看到了<a href="http://www.jeffjade.com/2016/11/24/116-JavaScript-string-operation/" target="_blank" rel="noopener">《JavaScript 字符串实用常操纪要》</a>这篇blog，感觉总结的比较全面、实用特此摘抄一下。我自己常用到的方法加了强调符号。</p>
<h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><h3 id="1-substring"><a href="#1-substring" class="headerlink" title="1. substring()"></a>1. substring()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xString.substring(start,end)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>substring()是最常用到的字符串截取方法，它可以接收两个参数(参数不能为负值)，分别是要截取的开始位置和结束位置，它将返回一个新的字符串，其内容是从start处到end-1处的所有字符。若结束参数(end)省略，则表示从start位置一直截取到最后。</p>
</blockquote>
<a id="more"></a>
<p>举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>,<span class="number">3</span>)) <span class="comment">// www</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">0</span>))   <span class="comment">//www.jeffjade.com</span></span><br><span class="line"><span class="built_in">console</span>.log(str.substring(<span class="number">-2</span>))  <span class="comment">//www.jeffjade.com (传负值则视为0)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="2-slice"><a href="#2-slice" class="headerlink" title="2. slice()"></a>2. <em>slice()</em></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.slice(start, end)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>slice()方法与substring()方法非常类似，它传入的两个参数也分别对应着开始位置和结束位置。而区别在于，slice()中的参数可以为负值，如果参数是负数，则该参数规定的是从字符串的尾部开始算起的位置。也就是说，-1 指字符串的最后一个字符。</p>
</blockquote>
<p>举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">0</span>, <span class="number">3</span>))    <span class="comment">// www</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>, <span class="number">-1</span>))  <span class="comment">// co</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">1</span>, <span class="number">-1</span>))   <span class="comment">// www.jeffjade.co</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">2</span>, <span class="number">1</span>))    <span class="comment">// '' (返回空字符串,start须小于end)</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">-3</span>, <span class="number">0</span>))   <span class="comment">// '' (返回空字符串,start须小于end)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-substr"><a href="#3-substr" class="headerlink" title="3. substr()"></a>3. substr()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.substr(start,length)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>substr()方法可在字符串中抽取从start下标开始的指定数目的字符。其返回值为一个字符串，包含从 stringObject的start（包括start所指的字符）处开始的length个字符。如果没有指定 length，那么返回的字符串包含从start到stringObject的结尾的字符。另外如果start为负数，则表示从字符串尾部开始算起</p>
</blockquote>
<p>举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(webStr.substr(<span class="number">1</span>, <span class="number">3</span>))   <span class="comment">// ww.</span></span><br><span class="line"><span class="built_in">console</span>.log(webStr.substr(<span class="number">0</span>))      <span class="comment">// www.jeffjade.com</span></span><br><span class="line"><span class="built_in">console</span>.log(webStr.substr(<span class="number">-3</span>, <span class="number">3</span>))  <span class="comment">// com</span></span><br><span class="line"><span class="built_in">console</span>.log(webStr.substr(<span class="number">-1</span>, <span class="number">5</span>))  <span class="comment">// m  (目标长度较大的话，以实际截取的长度为准)</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4-split"><a href="#4-split" class="headerlink" title="4. split()"></a>4. <em>split()</em></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.split([separator][, limit])</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>separator 指定用来分割字符串的字符（串）。separator 可以是一个字符串或正则表达式。 如果忽略 separator，则返回整个字符串的数组形式。如果 separator 是一个空字符串，则 str 将会把原字符串中每个字符的数组形式返回。</li>
<li>limit 一个整数，限定返回的分割片段数量。split 方法仍然分割每一个匹配的 separator，但是返回的数组只会截取最多 limit 个元素。</li>
</ul>
</blockquote>
<p>举例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line">str.split(<span class="string">'.'</span>)      <span class="comment">// ["www", "jeffjade", "com"]</span></span><br><span class="line">str.split(<span class="string">'.'</span>, <span class="number">1</span>)   <span class="comment">// ["www"]</span></span><br><span class="line">str.split(<span class="string">'.'</span>).join(<span class="string">''</span>) <span class="comment">// wwwjeffjadecom</span></span><br></pre></td></tr></table></figure></p>
<p>原文作者对这个方法比较称道，我自己也很常用这个方法，<code>splite()</code>和<code>join()</code>配合使用是很常见的方式。</p>
<h2 id="查找类方法"><a href="#查找类方法" class="headerlink" title="查找类方法"></a>查找类方法</h2><h3 id="1-indexOf-amp-includes"><a href="#1-indexOf-amp-includes" class="headerlink" title="1.  indexOf() &amp; includes()"></a>1.  <em>indexOf()</em> &amp; includes()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.indexOf(searchValue,fromIndex)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>indexOf()用来检索指定的字符串值在字符串中首次出现的位置。它可以接收两个参数，searchValue 表示要查找的子字符串，fromIndex 表示查找的开始位置，省略的话则从开始位置进行检索。</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'.'</span>))     <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'.'</span>, <span class="number">1</span>))  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'.'</span>, <span class="number">5</span>))  <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'.'</span>, <span class="number">12</span>)) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure></p>
<p>虽然 indexOf()用来检索指定的字符串值在字符串中首次出现的位置 ，然而很多时候，使用它的场景在于判断字符串中是否存在指定的字符串；因此代码就会如此：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.indexOf(<span class="string">'yoursPecifiedStr'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要知道在这样的场景下，<code>ES6</code> 语言中的includes()就显得更优雅许多；includes() 方法用于判断一个字符串是否被包含在另一个字符串中，如果是返回true，否则返回false。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.includes(searchString[, position])</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>searchString 将要搜寻的子字符串。position 可选。从当前字符串的哪个索引位置开始搜寻子字符串；默认为0。需要注意的是，includes() 是区分大小写的。</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Blue Whale'</span>.includes(<span class="string">'blue'</span>); <span class="comment">// returns false</span></span><br><span class="line"><span class="string">'乔峰乔布斯乔帮主'</span>.includes(<span class="string">'乔布斯'</span>); <span class="comment">// returns true</span></span><br><span class="line"><span class="keyword">if</span> (str.includes(<span class="string">'yoursPecifiedStr'</span>)) &#123;</span><br><span class="line">    <span class="comment">// do something(这样写是不是更为人性化？Yeah，这是一个更趋向人性化的时代嘛)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-lastIndexOf"><a href="#2-lastIndexOf" class="headerlink" title="2. lastIndexOf()"></a>2. lastIndexOf()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.lastIndexOf(searchValue,fromIndex)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>lastIndexOf()语法与indexOf()类似，它返回的是一个指定的子字符串值最后出现的位置，其检索顺序是从后向前。</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'.'</span>))     <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'.'</span>, <span class="number">1</span>))  <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'.'</span>, <span class="number">5</span>))  <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'.'</span>, <span class="number">12</span>)) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-search"><a href="#3-search" class="headerlink" title="3.search()"></a>3.search()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringObject.search(substr)</span><br><span class="line">stringObject.search(regexp)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>search()方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。它会返回第一个匹配的子字符串的起始位置，如果没有匹配的，则返回-1</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="string">'w'</span>))    <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/j/g</span>))   <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/\./g</span>))  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p>
<h3 id="3-match"><a href="#3-match" class="headerlink" title="3.match()"></a>3.match()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringObject.match(substr)</span><br><span class="line">stringObject.match(regexp)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>match()方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br>如果参数中传入的是子字符串或是没有进行全局匹配的正则表达式，那么match()方法会从开始位置执行一次匹配，如果没有匹配到结果，则返回null。否则则会返回一个数组，该数组的第0个元素存放的是匹配文本，除此之外，返回的数组还含有两个对象属性index和input，分别表示匹配文本的起始字符索引和stringObject 的引用(即原字符串)。</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'#1a2b3c4d5e#'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'A'</span>));    <span class="comment">//返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'b'</span>));    <span class="comment">//返回["b", index: 4, input: "#1a2b3c4d5e#"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/b/</span>));    <span class="comment">//返回["b", index: 4, input: "#1a2b3c4d5e#"]</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果参数传入的是具有全局匹配的正则表达式，那么match()从开始位置进行多次匹配，直到最后。如果没有匹配到结果，则返回null。否则则会返回一个数组，数组中存放所有符合要求的子字符串，并且没有index和input属性。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'#1a2b3c4d5e#'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/h/g</span>))     <span class="comment">//返回null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d/g</span>))    <span class="comment">//返回["1", "2", "3", "4", "5"]</span></span><br></pre></td></tr></table></figure>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><h3 id="1-replace"><a href="#1-replace" class="headerlink" title="1.replace()"></a>1.<em>replace()</em></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp/substr,replacement)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>replace()方法用来进行字符串替换操作，它可以接收两个参数，前者为被替换的子字符串（可以是正则），后者为用来替换的文本。<br>如果第一个参数传入的是子字符串或是没有进行全局匹配的正则表达式，那么replace()方法将只进行一次替换（即替换最前面的），返回经过一次替换后的结果字符串。</p>
</blockquote>
<p>举例<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">'w'</span>, <span class="string">'W'</span>))   <span class="comment">// Www.jeffjade.com</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/w/</span>, <span class="string">'W'</span>))   <span class="comment">// Www.jeffjade.com</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>如果第一个参数传入的全局匹配的正则表达式，那么replace()将会对符合条件的子字符串进行多次替换，最后返回经过多次替换的结果字符串。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/w/g</span>, <span class="string">'W'</span>))   <span class="comment">// WWW.jeffjade.com</span></span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-toLowerCase-amp-toUpperCase"><a href="#2-toLowerCase-amp-toUpperCase" class="headerlink" title="2.toLowerCase() &amp; toUpperCase()"></a>2.toLowerCase() &amp; toUpperCase()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stringObject.toLowerCase()</span><br><span class="line">stringObject.toUpperCase()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>toLowerCase()方法可以把字符串中的大写字母转换为小写，toUpperCase()方法可以把字符串中的小写字母转换为大写。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'www.jeffjade.com'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toLowerCase())   <span class="comment">// www.jeffjade.com</span></span><br><span class="line"><span class="built_in">console</span>.log(str.toUpperCase())   <span class="comment">// WWW.JEFFJADE.COM</span></span><br></pre></td></tr></table></figure>
<h3 id="3-模板字符串"><a href="#3-模板字符串" class="headerlink" title="3.模板字符串"></a>3.模板字符串</h3><p>这是<code>es6</code>的新特性，的确比较人性化，感觉是借鉴了类似于python等语言的理念</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ncieFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"四海无人对夕阳"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> niceMan = <span class="string">"陈寅恪"</span>;</span><br><span class="line"><span class="keyword">var</span> jadeTalk = <span class="string">`一生负气成今日 \n <span class="subst">$&#123;ncieFunc()&#125;</span> ,</span></span><br><span class="line"><span class="string">语出 <span class="subst">$&#123;niceMan&#125;</span> 的《忆故居》。</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(jadeTalk)</span><br></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<blockquote>
<p>一生负气成今日<br>四海无人对夕阳 ,<br>语出 陈寅恪 的《忆故居》。</p>
</blockquote>
<h2 id="配合使用"><a href="#配合使用" class="headerlink" title="配合使用"></a>配合使用</h2><p>很多字符串的操作可以自定义工具函数来进行使用，<code>lodash</code>和<code>jquery</code>中提供了很多，这里摘抄原blog的一些使用。</p>
<h3 id="1-字符串反转"><a href="#1-字符串反转" class="headerlink" title="1.字符串反转"></a>1.字符串反转</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.reverse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-去除空白行"><a href="#2-去除空白行" class="headerlink" title="2.去除空白行"></a>2.去除空白行</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.removeBlankLines = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(\n[\s\t]*\r*\n)/g</span>, <span class="string">'\n'</span>).replace(<span class="regexp">/^[\n\r\n\t]*|[\n\r\n\t]*$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><em>去除字符串两端的空格可以用原生方法trim()</em></p>
<h3 id="3-转化为二维数组"><a href="#3-转化为二维数组" class="headerlink" title="3.转化为二维数组"></a>3.转化为二维数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.removeBlankLines = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/(\n[\s\t]*\r*\n)/g</span>, <span class="string">'\n'</span>).replace(<span class="regexp">/^[\n\r\n\t]*|[\n\r\n\t]*$/g</span>, <span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.prototype.strTo2dArr = <span class="function"><span class="keyword">function</span>(<span class="params">firstSplit, secondSplit</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> contentStr = <span class="keyword">this</span>.removeBlankLines(),</span><br><span class="line">		contentStrArr = contentStr.split(firstSplit),</span><br><span class="line">		resultArr = contentStrArr.map(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> element.split(secondSplit)</span><br><span class="line">        &#125;)</span><br><span class="line">	<span class="keyword">return</span> resultArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">渺渺钟声出远方,依依林影万鸦藏。</span></span><br><span class="line"><span class="string">一生负气成今日,四海无人对夕阳。</span></span><br><span class="line"><span class="string">破碎山河迎胜利,残馀岁月送凄凉。</span></span><br><span class="line"><span class="string">松门松菊何年梦,且认他乡作故乡。</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="built_in">console</span>.log(str.strTo2dArr(<span class="string">'\n'</span>, <span class="string">','</span>))</span><br></pre></td></tr></table></figure>
<p>运行结果为</p>
<blockquote>
<p>[ [ ‘渺渺钟声出远方’, ‘依依林影万鸦藏。’ ],<br>[ ‘一生负气成今日’, ‘四海无人对夕阳。’ ],<br>[ ‘破碎山河迎胜利’, ‘残馀岁月送凄凉。’ ],<br>[ ‘松门松菊何年梦’, ‘且认他乡作故乡。’ ] ]</p>
</blockquote>
<p><em>直接转化为数组用split</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直想总结一篇js的字符串操作文档，之前有过笔记，但是都比较零散，而且&lt;code&gt;es6&lt;/code&gt;的出现让操作字符串出现了一些新的方式，今天看到了&lt;a href=&quot;http://www.jeffjade.com/2016/11/24/116-JavaScript-string-operation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《JavaScript 字符串实用常操纪要》&lt;/a&gt;这篇blog，感觉总结的比较全面、实用特此摘抄一下。我自己常用到的方法加了强调符号。&lt;/p&gt;
&lt;h2 id=&quot;字符串截取&quot;&gt;&lt;a href=&quot;#字符串截取&quot; class=&quot;headerlink&quot; title=&quot;字符串截取&quot;&gt;&lt;/a&gt;字符串截取&lt;/h2&gt;&lt;h3 id=&quot;1-substring&quot;&gt;&lt;a href=&quot;#1-substring&quot; class=&quot;headerlink&quot; title=&quot;1. substring()&quot;&gt;&lt;/a&gt;1. substring()&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xString.substring(start,end)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;substring()是最常用到的字符串截取方法，它可以接收两个参数(参数不能为负值)，分别是要截取的开始位置和结束位置，它将返回一个新的字符串，其内容是从start处到end-1处的所有字符。若结束参数(end)省略，则表示从start位置一直截取到最后。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="码畜相关" scheme="http://lanbos.win/categories/coder/"/>
    
    
      <category term="js" scheme="http://lanbos.win/tags/js/"/>
    
  </entry>
  
</feed>
